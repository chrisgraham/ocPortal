<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2014

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		search
 */

/**
 * Module page class.
 */
class Module_search
{
	/**
	 * Standard modular info function.
	 *
	 * @return ?array	Map of module info (NULL: module is disabled).
	 */
	function info()
	{
		$info=array();
		$info['author']='Chris Graham';
		$info['organisation']='ocProducts';
		$info['hacked_by']=NULL;
		$info['hack_version']=NULL;
		$info['version']=5;
		$info['update_require_upgrade']=1;
		$info['locked']=false;
		return $info;
	}

	/**
	 * Standard modular uninstall function.
	 */
	function uninstall()
	{
		$GLOBALS['SITE_DB']->drop_table_if_exists('searches_saved');
		$GLOBALS['SITE_DB']->drop_table_if_exists('searches_logged');
	}

	/**
	 * Standard modular install function.
	 *
	 * @param  ?integer	What version we're upgrading from (NULL: new install)
	 * @param  ?integer	What hack version we're upgrading from (NULL: new-install/not-upgrading-from-a-hacked-version)
	 */
	function install($upgrade_from=NULL,$upgrade_from_hack=NULL)
	{
		if (is_null($upgrade_from))
		{
			$GLOBALS['SITE_DB']->create_table('searches_saved',array(
				'id'=>'*AUTO',
				's_title'=>'SHORT_TEXT',
				's_member_id'=>'MEMBER',
				's_time'=>'TIME',
				's_primary'=>'SHORT_TEXT',
				's_auxillary'=>'LONG_TEXT',
			));

			$GLOBALS['SITE_DB']->create_table('searches_logged',array(
				'id'=>'*AUTO',
				's_member_id'=>'MEMBER',
				's_time'=>'TIME',
				's_primary'=>'SHORT_TEXT',
				's_auxillary'=>'LONG_TEXT',
				's_num_results'=>'INTEGER',
			));

			$GLOBALS['SITE_DB']->create_index('searches_logged','past_search',array('s_primary'));

			$GLOBALS['SITE_DB']->create_index('searches_logged','#past_search_ft',array('s_primary'));
		}
	}

	/**
	 * Standard modular entry-point finder function.
	 *
	 * @param  boolean	Whether to check permissions.
	 * @param  ?MEMBER	The member to check permissions as (NULL: current user).
	 * @param  boolean	Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name).
	 * @param  boolean	Whether to avoid any entry-point (or even return NULL to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "misc" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
	 * @return ?array		A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (NULL: disabled).
	 */
	function get_entry_points($check_perms=true,$member_id=NULL,$support_crosslinks=true,$be_deferential=false)
	{
		return array(
			'misc'=>array('SEARCH_TITLE','buttons/search'),
		);
	}

	var $title;
	var $ob;
	var $info;

	/**
	 * Standard modular pre-run function, so we know meta-data for <head> before we start streaming output.
	 *
	 * @return ?tempcode		Tempcode indicating some kind of exceptional output (NULL: none).
	 */
	function pre_run()
	{
		$type=get_param('type','misc');

		require_lang('search');

		if ($type=='misc' || $type=='results')
		{
			inform_non_canonical_parameter('search_under');
			inform_non_canonical_parameter('all_defaults');
			inform_non_canonical_parameter('days');
			inform_non_canonical_parameter('only_titles');
			inform_non_canonical_parameter('conjunctive_operator');
			inform_non_canonical_parameter('boolean_search');
			inform_non_canonical_parameter('only_search_meta');
			inform_non_canonical_parameter('content');
			inform_non_canonical_parameter('author');
			inform_non_canonical_parameter('direction');
			inform_non_canonical_parameter('#^search_.*$#');

			$id=get_param('id','');
			if ($id!='') // Specific screen, prepare
			{
				require_code('hooks/modules/search/'.filter_naughty_harsh($id),true);
				$ob=object_factory('Hook_search_'.filter_naughty_harsh($id));
				$info=$ob->info();

				if (!is_null($info))
					$this->title=get_screen_title('_SEARCH_TITLE',true,array($info['lang']));

				breadcrumb_set_parents(array(array('_SELF:_SELF',do_lang_tempcode('SEARCH_FOR'))));
				breadcrumb_set_self($info['lang']);

				$this->ob=$ob;
				$this->info=$info;
			}
		}

		if ($type=='misc')
		{
			$this->title=get_screen_title('SEARCH_TITLE');
		}

		if ($type=='results')
		{
			$this->title=get_screen_title('SEARCH_RESULTS');

			attach_to_screen_header('<meta name="robots" content="noindex,nofollow" />'); // XHTMLXHTML
		}

		return NULL;
	}

	/**
	 * Standard modular run function.
	 *
	 * @return tempcode	The result of execution.
	 */
	function run()
	{
		require_css('search');
		require_css('forms');
		require_code('database_search');

		if (function_exists('set_time_limit')) @set_time_limit(15); // We really don't want to let it thrash the DB too long

		$type=get_param('type','misc');
		if (($type=='misc') || ($type=='results')) return $this->form();

		return new ocp_tempcode();
	}

	/**
	 * The UI to do a search.
	 *
	 * @return tempcode		The UI
	 */
	function form()
	{
		$id=get_param('id','');

		$_GET['type']='results'; // To make it consistent for the purpose of URL generation (particularly how frames tie together)

		require_code('templates_internalise_screen');

		if ($id!='') // Specific screen, prepare
		{
			$ob=$this->ob;
			$info=$this->info;

			$under=get_param('search_under','!',true);
			if ((!is_null($info)) && (method_exists($ob,'get_tree'))) $ob->get_tree($under);
		}

		require_javascript('javascript_ajax');
		require_javascript('javascript_ajax_people_lists');

		$content=get_param('content',NULL,true);

		$user_label=do_lang_tempcode('SEARCH_USER');
		$days_label=do_lang_tempcode('SUBMITTED_WITHIN');

		$extra_sort_fields=array();

		$has_template_search=false;

		if ($id!='') // Specific screen
		{
			$url_map=array('page'=>'_SELF','type'=>'results','id'=>$id,'specific'=>1);
			$catalogue_name=get_param('catalogue_name','');
			if ($catalogue_name!='') $url_map['catalogue_name']=$catalogue_name;
			$url=build_url($url_map,'_SELF',NULL,false,true);

			require_code('hooks/modules/search/'.filter_naughty_harsh($id),true);
			$ob=object_factory('Hook_search_'.filter_naughty_harsh($id));
			$info=$ob->info();
			if (is_null($info)) warn_exit(do_lang_tempcode('SEARCH_HOOK_NOT_AVAILABLE'));

			if (array_key_exists('user_label',$info)) $user_label=$info['user_label'];
			if (array_key_exists('days_label',$info)) $days_label=$info['days_label'];

			$extra_sort_fields=array_key_exists('extra_sort_fields',$info)?$info['extra_sort_fields']:array();

			$under=NULL;
			if (method_exists($ob,'ajax_tree'))
			{
				require_javascript('javascript_tree_list');
				require_javascript('javascript_more');
				$ajax=true;
				$under=get_param('search_under','',true);
				$ajax_tree=$ob->ajax_tree();
				if (is_object($ajax_tree)) return $ajax_tree;
				list($ajax_hook,$ajax_options)=$ajax_tree;

				require_code('hooks/systems/ajax_tree/'.$ajax_hook);
				$tree_hook_ob=object_factory('Hook_'.$ajax_hook);
				$simple_content=$tree_hook_ob->simple(NULL,$ajax_options,preg_replace('#,.*$#','',$under));

				$nice_label=$under;
				if (!is_null($under))
				{
					$simple_content_evaluated=$simple_content->evaluate();
					$matches=array();
					if (preg_match('#<option [^>]*value="'.preg_quote($under,'#').'('.((strpos($under,',')===false)?',':'').'[^"]*)?"[^>]*>([^>]* &gt; )?([^>]*)</option>#',$simple_content_evaluated,$matches)!=0)
					{
						if (strpos($under,',')===false) $under=$under.$matches[1];
						$nice_label=trim($matches[3]);
					}
				}

				require_code('form_templates');
				$tree=do_template('FORM_SCREEN_INPUT_TREE_LIST',array(
					'_GUID'=>'25368e562be3b4b9c6163aa008b47c91',
					'MULTI_SELECT'=>false,
					'TABINDEX'=>strval(get_form_field_tabindex()),
					'NICE_LABEL'=>(is_null($nice_label) || $nice_label=='-1')?'':$nice_label,
					'END_OF_FORM'=>true,
					'REQUIRED'=>false,
					'USE_SERVER_ID'=>false,
					'NAME'=>'search_under',
					'DEFAULT'=>$under,
					'HOOK'=>$ajax_hook,
					'ROOT_ID'=>'',
					'OPTIONS'=>serialize($ajax_options),
				));
			} else
			{
				$ajax=false;
				$tree=form_input_list_entry('!',false,do_lang_tempcode('NA_EM'));
				if (method_exists($ob,'get_tree'))
				{
					$under=get_param('search_under','!',true);
					$tree->attach($ob->get_tree($under));
				}
			}

			$options=new ocp_tempcode();
			if (array_key_exists('special_on',$info))
				foreach ($info['special_on'] as $name=>$display)
					$options->attach(do_template('SEARCH_FOR_SEARCH_DOMAIN_OPTION',array('_GUID'=>'c1853f42d0a110026453f8b94c9f623c','CHECKED'=>(!is_null($content)) || (get_param_integer('option_'.$id.'_'.$name,0)==1),'NAME'=>'option_'.$id.'_'.$name,'DISPLAY'=>$display)));
			if (array_key_exists('special_off',$info))
				foreach ($info['special_off'] as $name=>$display)
					$options->attach(do_template('SEARCH_FOR_SEARCH_DOMAIN_OPTION',array('_GUID'=>'2223ada7636c85e6879feb9a6f6885d2','CHECKED'=>(get_param_integer('option_'.$id.'_'.$name,0)==1),'NAME'=>'option_'.$id.'_'.$name,'DISPLAY'=>$display)));
			if (method_exists($ob,'get_fields'))
			{
				$fields=$ob->get_fields();
				foreach ($fields as $field)
				{
					$options->attach(do_template('SEARCH_FOR_SEARCH_DOMAIN_OPTION'.$field['TYPE'],array('_GUID'=>'a223ada7636c85e6879feb9a6f6885d2','NAME'=>'option_'.$field['NAME'],'DISPLAY'=>$field['DISPLAY'],'SPECIAL'=>$field['SPECIAL'],'CHECKED'=>array_key_exists('checked',$field)?$field['CHECKED']:false)));
				}

				$has_template_search=true;
			}

			$specialisation=do_template('SEARCH_ADVANCED',array('_GUID'=>'fad0c147b8291ba972f105c65715f1ac','AJAX'=>$ajax,'OPTIONS'=>$options,'TREE'=>$tree,'UNDERNEATH'=>!is_null($under)));

		} else // General screen
		{
			$map=array('page'=>'_SELF','type'=>'results');
			$under=get_param('search_under','-1',true);
			if ($under!='-1') $map['search_under']=$under;
			$url=build_url($map,'_SELF',NULL,false,true);

			$search_domains=new ocp_tempcode();
			$_search_domains=array();
			$_hooks=find_all_hooks('modules','search');
			foreach (array_keys($_hooks) as $hook)
			{
				require_code('hooks/modules/search/'.filter_naughty_harsh($hook));
				$ob=object_factory('Hook_search_'.filter_naughty_harsh($hook),true);
				if (is_null($ob)) continue;
				$info=$ob->info();
				if (is_null($info)) continue;

				$is_default_or_advanced=(($info['default']) && ($id=='')) || ($hook==$id);

				$checked=(get_param_integer('search_'.$hook,((is_null($content)) || (get_param_integer('all_defaults',0)==1))?($is_default_or_advanced?1:0):0)==1);

				$options_url=((array_key_exists('special_on',$info)) || (array_key_exists('special_off',$info)) || (array_key_exists('extra_sort_fields',$info)) || (method_exists($ob,'get_fields')) || (method_exists($ob,'get_tree')) || (method_exists($ob,'get_ajax_tree')))?build_url(array('page'=>'_SELF','id'=>$hook),'_SELF',NULL,false,true):new ocp_tempcode();

				$_search_domains[]=array('_GUID'=>'3d3099872184923aec0f49388f52c750','ADVANCED_ONLY'=>(array_key_exists('advanced_only',$info)) && ($info['advanced_only']),'CHECKED'=>$checked,'OPTIONS_URL'=>$options_url,'LANG'=>$info['lang'],'NAME'=>$hook);
			}
			sort_maps_by($_search_domains,'LANG');
			foreach ($_search_domains as $sd)
			{
				$search_domains->attach(do_template('SEARCH_FOR_SEARCH_DOMAIN',$sd));
			}

			$specialisation=do_template('SEARCH_DOMAINS',array('_GUID'=>'1fd8718b540ec475988070ee7a444dc1','SEARCH_DOMAINS'=>$search_domains));
		}

		$author=get_param('author','');
		$author_id=($author!='')?$GLOBALS['FORUM_DRIVER']->get_member_from_username($author):NULL;
		$days=get_param_integer('days',60);
		$sort=get_param('sort','relevance');
		$direction=get_param('direction','DESC');
		if (!in_array(strtoupper($direction),array('ASC','DESC'))) log_hack_attack_and_exit('ORDERBY_HACK');
		$only_titles=get_param_integer('only_titles',0)==1;
		$search_under=get_param('search_under','!',true);
		if ($search_under=='') $search_under='!';
		$boolean_operator=get_param('conjunctive_operator','OR');

		$has_fulltext_search=db_has_full_text($GLOBALS['SITE_DB']->connection_read);

		$can_order_by_rating=db_has_subqueries($GLOBALS['SITE_DB']->connection_read);

		// Perform search, if we did one
		$out=NULL;
		$pagination='';
		$num_results=0;
		if (!is_null($content))
		{
			list($out,$pagination,$num_results)=$this->results($id,$author,$author_id,$days,$sort,$direction,$only_titles,$search_under);

			if (has_zone_access(get_member(),'adminzone'))
			{
				$admin_search_url=build_url(array('page'=>'admin','type'=>'search','content'=>$content),'adminzone');
				attach_message(do_lang_tempcode('ALSO_ADMIN_ZONE_SEARCH',escape_html($admin_search_url->evaluate())),'inform');
			}
		}

		$tpl=do_template('SEARCH_FORM_SCREEN',array(
			'_GUID'=>'8bb208185740183323a6fe6e89d55de5',
			'SEARCH_TERM'=>is_null($content)?'':$content,
			'HAS_TEMPLATE_SEARCH'=>$has_template_search,
			'NUM_RESULTS'=>integer_format($num_results),
			'CAN_ORDER_BY_RATING'=>$can_order_by_rating,
			'EXTRA_SORT_FIELDS'=>$extra_sort_fields,
			'USER_LABEL'=>$user_label,
			'DAYS_LABEL'=>$days_label,
			'BOOLEAN_SEARCH'=>$this->_is_boolean_search(),
			'AND'=>$boolean_operator=='AND',
			'ONLY_TITLES'=>$only_titles,
			'DAYS'=>strval($days),
			'SORT'=>$sort,
			'DIRECTION'=>$direction,
			'CONTENT'=>$content,
			'RESULTS'=>$out,
			'PAGINATION'=>$pagination,
			'HAS_FULLTEXT_SEARCH'=>$has_fulltext_search,
			'TITLE'=>$this->title,
			'AUTHOR'=>$author,
			'SPECIALISATION'=>$specialisation,
			'URL'=>$url,
		));

		require_code('templates_internalise_screen');
		return internalise_own_screen($tpl);
	}

	/**
	 * Find whether we are doing a boolean search.
	 *
	 * @return boolean		Whether we are
	 */
	function _is_boolean_search()
	{
		$content=get_param('content','',true);

		$boolean_search=get_param_integer('boolean_search',0)==1;
		if (get_option('enable_boolean_search')=='0')
		{
			$boolean_search=false;
			if ((db_has_full_text($GLOBALS['SITE_DB']->connection_read)) && (method_exists($GLOBALS['SITE_DB']->static_ob,'db_has_full_text_boolean')) && ($GLOBALS['SITE_DB']->static_ob->db_has_full_text_boolean()))
			{
				$boolean_search=(preg_match('#["\+\-]#',$content)!=0);
			}
		}
		return $boolean_search;
	}

	/**
	 * The actualiser of a search.
	 *
	 * @param  ID_TEXT		Codename for what's being searched (blank: mixed search)
	 * @param  string			Author name
	 * @param  ?AUTO_LINK	Author ID (NULL: none given)
	 * @param  integer		Days to search
	 * @param  ID_TEXT		Sort key
	 * @param  ID_TEXT		Sort direction
	 * @set    ASC DESC
	 * @param  boolean		Whether to only search titles
	 * @param  string			Comma-separated list of categories to search under
	 * @return array			A triple: The results, results browser, the number of results
	 */
	function results($id,$author,$author_id,$days,$sort,$direction,$only_titles,$search_under)
	{
		cache_module_installed_status();

		$cutoff=($days==-1)?NULL:(time()-$days*24*60*60);

		// What we're searching for
		$content=get_param('content',false,true);

		// Search keyword highlighting in any loaded Comcode
		global $SEARCH__CONTENT_BITS;
		$_content_bits=explode(' ',str_replace('"','',preg_replace('#(^|\s)\+#','',preg_replace('#(^|\s)\-#','',$content))));
		$SEARCH__CONTENT_BITS=array();
		require_code('textfiles');
		$too_common_words=explode("\n",read_text_file('too_common_words','',true));
		foreach ($_content_bits as $content_bit)
		{
			$content_bit=trim($content_bit);
			if ($content_bit=='') continue;
			if (!in_array(strtolower($content_bit),$too_common_words))
			{
				$SEARCH__CONTENT_BITS[]=$content_bit;
			}
		}

		$start=get_param_integer('search_start',0);
		$default_max=intval(get_option('search_results_per_page'));
		if ((ini_get('memory_limit')!='-1') && (ini_get('memory_limit')!='0'))
		{
			if (intval(preg_replace('#M$#','',ini_get('memory_limit')))<20) $default_max=5;
		}
		$max=get_param_integer('search_max',$default_max);  // Also see get_search_rows

		$save_title=get_param('save_title','');
		if ((!is_guest()) && ($save_title!='') && ($start==0))
		{
			static $saved_search=false;
			if (!$saved_search)
			{
				$GLOBALS['SITE_DB']->query_insert('searches_saved',array(
					's_title'=>$save_title,
					's_member_id'=>get_member(),
					's_time'=>time(),
					's_primary'=>$content,
					's_auxillary'=>serialize(array_merge($_POST,$_GET)),
				));
				$saved_search=true;
			}
		}

		$boolean_operator=get_param('conjunctive_operator','OR');
		$boolean_search=$this->_is_boolean_search();
		$content_where=build_content_where($content,$boolean_search,$boolean_operator);

		disable_php_memory_limit();

		// Search under all hooks we've asked to search under
		$results=array();
		$_hooks=find_all_hooks('modules','search');
		foreach (array_keys($_hooks) as $hook)
		{
			require_code('hooks/modules/search/'.filter_naughty_harsh($hook));
			$ob=object_factory('Hook_search_'.filter_naughty_harsh($hook),true);
			if (is_null($ob)) continue;
			$info=$ob->info();
			if (is_null($info)) continue;

			$test=get_param_integer('search_'.$hook,0);
			if ((($test==1) || ((get_param_integer('all_defaults',0)==1) && ($info['default'])) || ($id==$hook)) && (($id=='') || ($id==$hook)))
			{
				// Category filter
				if (($search_under!='!') && ($search_under!='-1') && (array_key_exists('category',$info)))
				{
					$cats=explode(',',$search_under);
					$where_clause='(';
					foreach ($cats as $cat)
					{
						if (trim($cat)=='') continue;

						if ($where_clause!='(') $where_clause.=' OR ';
						if ($info['integer_category'])
						{
							$where_clause.=((strpos($info['category'],'.')!==false)?'':'r.').$info['category'].'='.strval($cat);
						} else
						{
							$where_clause.=db_string_equal_to(((strpos($info['category'],'.')!==false)?'':'r.').$info['category'],$cat);
						}
					}
					$where_clause.=')';
				} else $where_clause='';

				$only_search_meta=get_param_integer('only_search_meta',0)==1;
				$direction=get_param('direction','ASC');
				if (function_exists('set_time_limit')) @set_time_limit(5); // Prevent errant search hooks (easily written!) taking down a server. Each call given 5 seconds (calling set_time_limit resets the timer).
				$hook_results=$ob->run($content,$only_search_meta,$direction,$max,$start,$only_titles,$content_where,$author,$author_id,$cutoff,$sort,$max,$boolean_operator,$where_clause,$search_under,$boolean_search?1:0);
				if (is_null($hook_results)) continue;
				foreach ($hook_results as $i=>$result)
				{
					$result['object']=$ob;
					$result['type']=$hook;
					$hook_results[$i]=$result;
				}

				$results=sort_search_results($hook_results,$results,$direction);
			}
		}

		if (function_exists('set_time_limit')) @set_time_limit(15);

		// Now glue our templates together
		$out=build_search_results_interface($results,$start,$max,$direction,$id=='');
		if ($out->is_empty())
		{
			if (($days!=-1) && ($GLOBALS['TOTAL_SEARCH_RESULTS']==0))
			{
				$ret_maybe=$this->results($id,$author,$author_id,-1,$sort,$direction,$only_titles,$search_under);
				if (!$ret_maybe[0]->is_empty())
				{
					attach_message(do_lang_tempcode('NO_RESULTS_DAYS',escape_html(integer_format($days))),'notice');
					return $ret_maybe;
				}
			}

			return array(new ocp_tempcode(),new ocp_tempcode(),0);
		}

		require_code('templates_pagination');
		$pagination=pagination(do_lang_tempcode('RESULTS'),$start,'search_start',$max,'search_max',$GLOBALS['TOTAL_SEARCH_RESULTS'],true);

		if ($start==0)
		{
			$GLOBALS['SITE_DB']->query_insert('searches_logged',array(
				's_member_id'=>get_member(),
				's_time'=>time(),
				's_primary'=>substr($content,0,255),
				's_auxillary'=>serialize(array_merge($_POST,$_GET)),
				's_num_results'=>count($results),
			));
		}

		return array($out,$pagination,$GLOBALS['TOTAL_SEARCH_RESULTS']);
	}
}


