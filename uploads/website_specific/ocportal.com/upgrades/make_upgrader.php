<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2012

 You may not distribute a modified version of this file, unless it is solely as an ocPortal modification.
 See text/EN/licence.txt for full licencing information.

*/

/**
 * @license		http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright	ocProducts Ltd
 * @package		ocportalcom
 */

/* Returns triple: PATH or NULL if critical error, NULL or error string if error */
function make_upgrade_get_path($from_version,$to_version)
{
	$err=NULL;

	if (str_replace('.','',$from_version)=='')
	{
		$err='Source version not entered correctly.';
		return array(NULL,$err);
	}

	if ($from_version=='..') warn_exit(do_lang_tempcode('NO_PARAMETER_SENT','from version'));
	if ($to_version=='..') warn_exit(do_lang_tempcode('NO_PARAMETER_SENT','from version'));
	
	if ($from_version==$to_version)
	{
		$err='Put in the version number you are upgrading <strong>from</strong>, not to. Then a specialised upgrade file will be generated for you.';
		return array(NULL,$err);
	}

	if (function_exists('set_time_limit')) @set_time_limit(0);
	require_code('tar');
	require_code('m_zip');

	// Find out path/filenames for the upgrade file we're making
	$filename=$from_version.'-'.$to_version.'.tar';
	$tar_path=dirname(__FILE__).'/tars/'.$filename;
	$wip_path=dirname(__FILE__).'/tar_build/'.$filename;

	// Find out paths for the directories holding untarred full manual installers
	$old_base_path=dirname(__FILE__).'/full/'.$from_version;
	$new_base_path=dirname(__FILE__).'/full/'.$to_version;

	// Find corresponding download rows
	$old_download_row=($from_version=='')?NULL:find_download($from_version);
	if (is_null($old_download_row))
	{
		$err=escape_html('Version '.$from_version.' is not recognised');
		return array(NULL,$err);
	}
	$new_download_row=find_download($to_version);
	if (is_null($new_download_row)) return array(NULL,escape_html('Could not find version '.$to_version.' in the download database'));
	$mtime=$new_download_row['add_date'];
	if (!is_null($new_download_row['edit_date'])) $mtime=$new_download_row['edit_date'];

	// Exists already
	if (file_exists($tar_path))
	{
		if (filemtime($tar_path)>$mtime)
		{
			return array($tar_path,$err);
		} else // Outdated
		{
			unlink($tar_path);
		}
	}
	
	// Stop a race-condition
	if ((file_exists($old_base_path)) || (file_exists($new_base_path)) || (file_exists($wip_path)))
	{
		return array(NULL,'An upgrade is currently being generated by another user. Please try again in a minute.');
	}

	// Unzip old
	if (!is_null($old_download_row))
	{
		@mkdir($old_base_path,0777);
		if (!url_is_local($old_download_row['url'])) return array(NULL,escape_html('Non-local URL found ('.$old_download_row['url'].'). Unexpected.'));
		recursive_unzip(get_file_base().'/'.rawurldecode($old_download_row['url']),$old_base_path);
	}

	// Unzip new
	@mkdir($new_base_path,0777);
	if (!url_is_local($new_download_row['url'])) return array(NULL,escape_html('Non-local URL found ('.$new_download_row['url'].'). Unexpected.'));
	recursive_unzip(get_file_base().'/'.rawurldecode($new_download_row['url']),$new_base_path);

	// Make actual upgrader
	require_code('files2');
	@mkdir($wip_path,0777);
	make_upgrader_do_dir($wip_path,$new_base_path,$old_base_path);
	@copy($old_base_path.'/data/files.dat',$wip_path.'/data/files_previous.dat');
	$log_file=fopen(dirname(__FILE__).'/tarring.log','wt');
	$tar_handle=tar_open($tar_path.'.new','wb');
	tar_add_folder($tar_handle,$log_file,$wip_path,NULL,'',NULL,NULL,false,true);
	tar_close($tar_handle);
	fclose($log_file);
	@rename($tar_path.'.new',$tar_path);

	// Clean up	
	require_code('files2');
	@deldir_contents($new_base_path);
	@deldir_contents($old_base_path);
	@deldir_contents($wip_path);
	@rmdir($new_base_path);
	@rmdir($old_base_path);
	@rmdir($wip_path);

	return array($tar_path,$err);
}

function find_download($version_pretty)
{
	global $DOWNLOAD_ROWS;
	load_download_rows();

	$download_row=NULL;
	foreach ($DOWNLOAD_ROWS as $_download_row)
	{
		// When debugging, check downloads are validated
		if (($_download_row['nice_title']=='ocPortal Version '.$version_pretty.' (manual)') || ($_download_row['nice_title']=='ocPortal Version '.$version_pretty.' (bleeding-edge, manual)'))
		{
			$download_row=$_download_row;
			break;
		}
	}
	
	if ((is_null($download_row)) && (substr_count($version_pretty,'.')<2))
	{
		return find_download($version_pretty.'.0');
	}
	
	return $download_row;
}

function load_download_rows()
{
	global $DOWNLOAD_ROWS;
	if (!isset($DOWNLOAD_ROWS))
	{
		if (get_param_integer('test_mode',0)==1) // Test data
		{
			$DOWNLOAD_ROWS=array(
				array('id'=>20,'nice_title'=>'ocPortal Version 3.0','add_date'=>time()-60*60*8,'edit_date'=>NULL,'url'=>'uploads/downloads/test.zip','nice_description'=>'[Test message] This is 3. Yo peeps. 3.1 is the biz.'),
				array('id'=>30,'nice_title'=>'ocPortal Version 3.1','add_date'=>time()-60*60*5,'edit_date'=>NULL,'url'=>'uploads/downloads/test.zip','nice_description'=>'[Test message] This is 3.1.1. 3.1.1 is out dudes.'),
				array('id'=>35,'nice_title'=>'ocPortal Version 3.1.1','add_date'=>time()-60*60*5,'edit_date'=>NULL,'url'=>'uploads/downloads/test.zip','nice_description'=>'[Test message] This is 3.1.1. 3.2 is out dudes.'),
				array('id'=>40,'nice_title'=>'ocPortal Version 3.2 beta1','add_date'=>time()-60*60*4,'edit_date'=>NULL,'url'=>'uploads/downloads/test.zip','nice_description'=>'[Test message] This is 3.2 beta1. 3.2 beta2 is out.'),
				array('id'=>50,'nice_title'=>'ocPortal Version 3.2','add_date'=>time()-60*60*3,'edit_date'=>NULL,'url'=>'uploads/downloads/test.zip','nice_description'=>'[Test message] This is 3.2. 4 is out.'),
				array('id'=>60,'nice_title'=>'ocPortal Version 4.0','add_date'=>time()-60*60*1,'edit_date'=>NULL,'url'=>'uploads/downloads/test.zip','nice_description'=>'[Test message] This is the 4 and you can find bug reports somewhere.'),
			);
		} else
		{
			$DOWNLOAD_ROWS=$GLOBALS['SITE_DB']->query('SELECT d.*,t.text_original AS nice_title,t2.text_original AS nice_description,t2.text_parsed AS nice_description_parsed,add_date,edit_date,url FROM '.get_table_prefix().'download_downloads d LEFT JOIN '.get_table_prefix().'translate t ON t.id=d.name LEFT JOIN '.get_table_prefix().'translate t2 ON t2.id=d.description WHERE validated=1 ORDER BY add_date');
		}
	}
}

function recursive_unzip($zip_path,$unzip_path)
{
	$zip_handle=zip_open($zip_path);
	while (($entry=(zip_read($zip_handle)))!==false)
	{
		$entry_name=zip_entry_name($entry);
		if (substr($entry_name,-1)!='/')
		{
			$_entry=zip_entry_open($zip_handle,$entry);
			if ($_entry!==false)
			{
				@mkdir(dirname($unzip_path.'/'.$entry_name),0755,true);
				$out_file=fopen($unzip_path.'/'.$entry_name,'wb');
				while (true)
				{
					$it=zip_entry_read($entry,1024);
					if (($it===false) || ($it=='')) break;
					fwrite($out_file,$it);
				}
				zip_entry_close($entry);
				fclose($out_file);
			}
		}
	}
	zip_close($zip_handle);
}

function make_upgrader_do_dir($build_path,$new_base_path,$old_base_path,$dir='',$pretend_dir='')
{
	$dh=opendir($new_base_path.'/'.$dir);
	while (($file=readdir($dh))!==false)
	{
		$is_dir=is_dir($new_base_path.'/'.$dir.$file);

		if (should_ignore_file($pretend_dir.$file,IGNORE_NONBUNDLED_SCATTERED | IGNORE_CUSTOM_DIR_CONTENTS | IGNORE_CUSTOM_ZONES | IGNORE_CUSTOM_THEMES | IGNORE_NON_EN_SCATTERED_LANGS | IGNORE_BUNDLED_VOLATILE | IGNORE_BUNDLED_UNSHIPPED_VOLATILE,0)) continue;

		if ($is_dir)
		{
			@mkdir($build_path.'/'.$pretend_dir.$file,0777);
			make_upgrader_do_dir($build_path,$new_base_path,$old_base_path,$dir.$file.'/',$pretend_dir.$file.'/');

			// If it's empty still, delete it
			@rmdir($build_path.'/'.$pretend_dir.$file);
		}
		else
		{
			$contents=file_get_contents($new_base_path.'/'.$dir.$file);
			if ((strpos($dir,'/addon_registry')!==false) || (!file_exists($old_base_path.'/'.$pretend_dir.'/'.$file)) || (unixify_line_format($contents)!=unixify_line_format(file_get_contents($old_base_path.'/'.$pretend_dir.'/'.$file))))
			{
				copy($new_base_path.'/'.$dir.$file,$build_path.'/'.$pretend_dir.$file);
				touch($build_path.'/'.$pretend_dir.$file,filemtime($new_base_path.'/'.$dir.$file));
			}
		}
	}
}
