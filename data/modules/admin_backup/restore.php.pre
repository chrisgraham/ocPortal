<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2012

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

global $IN_MINIKERNEL_VERSION;
$IN_MINIKERNEL_VERSION=1;

// Find ocPortal base directory, and chdir into it
global $FILE_BASE;
$FILE_BASE=(strpos(__FILE__,'./')===false)?__FILE__:realpath(__FILE__);
if (substr($FILE_BASE,-4)=='.php')
{
	$a=strrpos($FILE_BASE,'/');
	$b=strrpos($FILE_BASE,'\\');
	$FILE_BASE=dirname($FILE_BASE);
}
@chdir($FILE_BASE);

error_reporting(E_ALL);

@ini_set('display_errors','1');
assert_options(ASSERT_ACTIVE,0);
@ini_set('assert.active','0');

global $MOBILE;
$MOBILE=0;

global $REQUIRED_BEFORE;
$REQUIRED_BEFORE=array();

global $SITE_INFO;
$SITE_INFO=array();

global $CACHE_DB;
$CACHE_DB=array();

global $OPTIONS;
$OPTIONS=array();

global $CURRENT_SHARE_USER;
$CURRENT_SHARE_USER=NULL;

$GLOBALS['DEV_MODE']=false;
$GLOBALS['SEMI_DEV_MODE']=true;

@ob_end_clean();

$shl=@ini_get('suhosin.memory_limit');
if (($shl===false) || ($shl=='') || ($shl=='0'))
{
	@ini_set('memory_limit','-1');
} else
{
	@ini_set('memory_limit',$shl);
}

if ((strpos(PHP_VERSION,'hiphop')!==false) || (array_key_exists('ZERO_HOME',$_ENV)) || (function_exists('quercus_version')) || (defined('PHALANGER')) || (defined('ROADSEND_PHPC')))
	define('HIPHOP_PHP','1');

// Requirements check
if (substr(phpversion(),0,2)=='3.') die(do_lang('PHP_OLD'));
if (substr(phpversion(),0,3)=='4.0') die(do_lang('PHP_OLD'));
if (ini_get('file_uploads')==0) die(do_lang('NO_UPLOAD'));

// Tunnel into some ocPortal code we can use
include('info.php');
require_code('critical_errors');
require_code('permissions');
require_code('minikernel');
require_code('support');
require_code('temporal');
require_code('caches');
require_code('files');
require_code('lang');
require_code('tempcode');
require_code('templates');
require_code('zones');
require_code('version');
require_code('comcode');
require_code('database');
require_code('database_action');

// If we are referencing this file in order to extract dependant url's from a pack
handle_self_referencing_embedment();

// Set up some globals
global $LANG,$VERSION,$CHMOD_ARRAY;
$LANG=(isset($_GET['default_lang']))?$_GET['default_lang']:'en';

// Languages we can use
require_lang('global');
require_lang('critical_error');
require_lang('installer');
require_lang('version');



// Now we actually read into the data file and execute the commented out reinstallation code. This is necessary for re-entrant code, and because we can't load it all through the PHP parser at once!

$time_start=time();

$myfile=fopen(dirname(__FILE__).'/restore_data.php','rb');
$i=0;
$offset=get_param_integer('start_offset',0);
if ($offset!=0)
{
	fseek($myfile,$offset);
	$found_start=true;
} else
{
	$found_start=false;
}
$sql_buildup='';
$start_line=0;
while (($line=fgets($myfile,10000000))!==false)
{
	if (!$found_start)
	{
		if (trim($line)=='//COMMANDS BEGIN')
		{
			$found_start=true;
			$start_line=$i;
		}
	} else
	{
		if (substr($line,0,2)!='//') break; // Done

		$line=substr($line,2);

		$is_new_command=false;
		$valid_cmd_starts=array(
			'$GLOBALS[\'SITE_DB\']->query_insert(\'',
			'$GLOBALS[\'SITE_DB\']->drop_if_exists(\'',
			'$GLOBALS[\'SITE_DB\']->create_table(\'',
			'$GLOBALS[\'SITE_DB\']->delete_index_if_exists(\'',
			'$GLOBALS[\'SITE_DB\']->create_index(\'',
		);
		foreach ($valid_cmd_starts as $valid_cmd_start)
			$is_new_command=$is_new_command || (substr(ltrim($line),0,strlen($valid_cmd_start))==$valid_cmd_start);
		if (($is_new_command) && ($sql_buildup!=''))
		{
			$success=@eval($sql_buildup); // NB: Query errors are echo'd out as DB API knows restoration script is running
			if ($success===false)
			{
				header('Content-type: text/plain');
				exit('Failed on: '.$sql_buildup);
			}
			$sql_buildup='';
		}
		if ((time()>=$time_start+20) && ($sql_buildup==''))
		{
			$refresh_url='restore.php?start='.strval($i+$start_line+get_param_integer('start',0)).'&start_offset='.strval(ftell($myfile));
			echo '<meta http-equiv="refresh" content="0;url='.$refresh_url.'" /> Please wait, continuing.';
			//header('Location: '.$refresh_url);	Can result in "This web page has a redirect loop" error
			exit();
		}

		$sql_buildup.=$line.chr(10);

		$i++;
	}
}
fclose($myfile);

if ($sql_buildup!='')
{
	$success=@eval($sql_buildup);
	if ($success===false)
	{
		header('Content-type: text/plain');
		exit('Failed on: '.$sql_buildup);
	}
	$sql_buildup='';
}




{!!DB!!}


require_code('tempcode_compiler');
$css_nocache=_do_template('default','/css/','no_cache','no_cache','EN','.css');
$tpl=do_template('RESTORE_HTML_WRAP',array('_GUID'=>'8e3b9d894d8ef06b5057fb654f7db59b','CSS_NOCACHE'=>$css_nocache,'MESSAGE'=>do_lang('SUCCESS')));
echo $tpl->evaluate();

/**
 * This function is a very important one when coding. It allows you to include a source code file (from root/sources/ or root/sources_custom/) through the proper channels.
 * You should remember this function, and not substitute anything else for it, as that will likely make your code unstable.
 * It is key to source code modularity in ocPortal.
 *
 * @param  string         The codename for the source module to load
 */
function require_code($codename)
{
	global $FILE_ARRAY,$REQUIRED_BEFORE;
	if (array_key_exists($codename,$REQUIRED_BEFORE)) return;
	$REQUIRED_BEFORE[$codename]=1;
	if (@is_array($FILE_ARRAY))
	{
		$file=file_array_get('sources/'.$codename.'.php');
		$file=str_replace('<?php','',$file);
		$file=str_replace('','',$file);
		eval($file);
		@call_user_func('init__'.str_replace('/','__',$codename));
	}
	else
	{
		global $FILE_BASE;

		$path=$FILE_BASE.((strpos($codename,'.php')===false)?('/sources/'.$codename.'.php'):'/'.str_replace('_custom','',$codename));
		if (!file_exists($path))
			$path=$FILE_BASE.((strpos($codename,'.php')===false)?('/sources_custom/'.$codename.'.php'):'/'.str_replace('_custom','',$codename));
		require_once($path);
		@call_user_func('init__'.str_replace('/','__',$codename));
	}
}

/**
 * Make an object of the given class
 *
 * @param  string			The class name
 * @return object			The object
 */
function object_factory($class)
{
	return new $class;
}

/**
 * Handle GET URLs requesting embedded media files.
 */
function handle_self_referencing_embedment()
{
	// If this is self-referring to CSS or logo
	if (array_key_exists('type',$_GET))
	{
		$type=$_GET['type'];

		if ($type=='logo')
		{
			header('Content-type: image/png');
			if (!file_exists(get_file_base().'/themes/default/images/'.get_site_default_lang().'/logo/trimmed-logo.png'))
			{
				$out=file_array_get('themes/default/images/'.get_site_default_lang().'/logo/trimmed-logo.png');
			}
			else $out=file_get_contents(get_file_base().'/themes/default/images/'.get_site_default_lang().'/logo/trimmed-logo.png');

			echo $out;

			exit();
		}
		if ($type=='css')
		{
			header('Content-Type: text/css');
			if (!file_exists(get_file_base().'/themes/default/css/global.css'))
			{
				$file=file_array_get('themes/default/css/global.css');
				echo $file;
				$file=file_array_get('themes/default/css/install.css');
				echo $file;
			} else
			{
				$path=get_file_base().'/themes/default/templates_cached/EN/install.css';
				if (!file_exists($path))
					$path=get_file_base().'/themes/default/css/install.css';
				require_once($path);

				$path=get_file_base().'/themes/default/templates_cached/EN/global.css';
				if (!file_exists($path))
					$path=get_file_base().'/themes/default/css/global.css';
				require_once($path);
			}

			exit();
		}
	}
}


