[title sub="For ocPortal version 9.0"]ocPortal Code Book[/title]

[surround="spaced_list"]
&laquo; Return to [page="_SEARCH:codebook"]Code Book table of contents[/page]

[contents][/contents]

[title="2"]ocPortal core performance[/title]

The ocPortal core is extremely optimised.

Most of the ocPortal page generation time can be put down to detecting the context the user is operating in, retrieving all components from their storage locations, structuring, processing whatever aspects of the output are dynamic, and outputting. This typically all-together takes a few hundred milliseconds. With opcode caching and persistent caching, it can be under 100ms, and potentially further with a platform like HipHop-PHP (which compiles code, and keeps code even more permanently resident between requests than an opcode cache).

The very core ocPortal responsibilities are as follows...

Input:
 - Set correct character sets, for unexpected inputs (fast default case: ASCII request)
 - Input validation / gating to defaults
 - Input state management
 - File/HTTP I/O stubs
Output:
 - Find character set (fast default case: hard-coded character set optimisation)
 - CSS and Javascript inclusion/merging
 - Breadcrumbs (disableable)
 - Comcode-page rendering (fast default case: Comcode cache)
 - Date/time rendering
 - Time period rendering
 - Output framing
 - Tempcode assembly
 - Tempcode rendering
 - Tempcode symbol processing
 - Tempcode output escaping
 - Theme images (fast default case: persistent cache)
 - Output state management
 - Primitive types rendering
 - Locales
 - Basic template bindings
Internal dispatch:
 - Finding linked scripts (internal caching)
 - Error generation
 - General link generation
 - URL-moniker linking
 - Page-link decoding
 - Keep-parameter propagation
 - Page-identification and dispatch
 - Page searching (fast default case)
 - Match-keys
 - Hook searching
 - Block and module calling
 - Block processing
 - Meta-data querying
 - Addon state detection (fast default case: persistent cache)
Configuration:
 - Read base config and provide defaults
 - Software versioning
 - Config options API (fast default case: self-learning cache)
 - Config values API
Caches:
 - Find if a decaching request is active
 - Static caching for Guests and bots (the ultimate optimisation)
 - Persistent cache
 - Self-learning cache
 - Block caching
Context detection:
 - Getting base URLs, based on SSL and zone context (internal caching)
 - Detect safe mode (fast default case: hard-coded setting)
 - Find current script context
 - Mobile detection
 - Rendering option detection [e.g. wide mode]
 - Cookie detection (may be disabled)
 - Javascript detection (may be disabled)
 - Browser capability/flag detection
 - IP banning (disableable)
 - Detection of user language (fast default case if internationalisation disabled)
 - Self-linking/context-identification
 - Detect of timezone (fast default case if internationalisation disabled)
 - Server/HTTP-environment querying
 - Users-online limit (disableable)
Users/Members:
 - Find the current member
 - Session restoration (fast default case: persistent cache)
 - Session clean up (only runs randomly)
 - Cookie logins
 - Alternative login types
 - Display names
 - Custom profile fields
 - Forum driver object initialisation and driver binding and driver
 - Detecting and actioning logins
Processing:
 - Memory management
 - Intelligent code inclusion, overrides (fast default case: persistent caching of current code profiles)
 - Database API (delayed connection instantiation; structural management code not loaded by default)
 - Database API low-level driver
 - Error handlers (only called exceptionally)
 - Comcode (fast default case: simple conversions)
 - Language requiring (fast default case: self-learning cache)
 - Lookup language strings, support parameters, pluralisation differences, vowel/consonant differences
 - Lookup translations, including linking to Comcode parsing
 - Translation database storage
 - Stats logging (disableable)
 - utf-8 support
 - Sorting
 - Primitive types data conversions
 - IP address detection and processing

We try and keep the core code size to an absolute minimum, due to memory requirements and PHP parsing time. Sometimes we have a little more code loaded up than needed, but only for things that are common even if not 100% routine. It is reasonable to assume a performance-conscience user will have an opcode cache, which removes the issue of code quantity.

Anything not marked with a specific bypass optimisation (in brackets) will still have been heavily optimised: the ocPortal core is extremely optimal.

Note that while we have a lot of user-specific and security features in the above list, but these can be bypassed when not needed via the static cache.

Various hidden optimisation flags are described later in the Code Book, and also in the ocPortal optimisation tutorial.

[title="2"]Why not more object-orientation?[/title]

Most PHP CMSs have gone in the direction of having very sophisticated object systems, with dependency injection, design patterns and namespaces.

ocPortal however doesn't use this kind of stuff, and breaks what some people would consider best practices.

[i]This is entirely intentional[/i] and we want to explain why, because there are a lot of people out there with strong opinions on how to design a web system and we realise our approach is not the conventional one that a lot of people are pushing. We want to explain why we think we have built a far more productive environment in ocPortal. This will seem like a bit of a wild rant, but really we've gone into detail to hopefully shine a light on the ocPortal design decisions.

It's a matter of good engineering to consider all factors when coming up with a design. Here are some design considerations, in rough order of decreasing importance:
1) Ease and efficiency of coding for the framework
2) Performance of live code
3) Ease of understanding and maintaining the framework
4) Ability to automatically test
5) Strict separation of concerns to stop developers interfacing incorrectly with functionality
6) Ability to create complex abstractions and contextual shifts when dealing with special scenarios -- for example, test runs and simulations

'1' is so important. We feel that with OOP-heavy frameworks, where you have to worry about relatively complex initialisations of every part of the system you want to touch, and how you are going to plumb all the different components together, it really makes the code take a lot longer to write due to the extra verbosity. In fact, 66% of code can easily be taken up just by extra plumbing, and this really hurts when you're trying to get ROI on your time investment. Yes, extra plumbing is not that hard, but it is time consuming to do and maintain and to read through.

Regarding '2', method calls are expensive in PHP, and variable storage uses a lot more memory than you think, as does the memory simply to load up PHP code. So, there really is a high cost in all the plumbing you might want to do -- 66% more code could certainly mean 40% more memory usage, and 30% slower CPU performance. Users increasingly expect sites to respond extremely fast, yet CPU speeds have not really increased in a decade, and PHP is not getting significantly faster either. On top of all this, frameworks also mean you need to load a lot more code than you need, due to having to load up structures that are more complete and complex than you strictly need to serve the simple requests you are normally serving. Most OOP-heavy framework users respond by slapping on a full-page cache, but this is very limiting because then you really block the social interactivity you really want from a system like ocPortal.

Regarding '3', OOP-heavy architectures try to abstract away details to make things simpler, but in the process of defining custom interfaces for all modes of interaction, and plumbing to connect all the objects together, you end up with a huge amount of new interface complexity to both understand and maintain. We think this really is a zero-sum game. There's a really important design principle in the field of agile programming called 'You don't need it' (YDNI), and OOP-heavy architectures often go against this by trying to plan out for all access scenarios upfront and abstract them perfectly -- it's much better that we don't waste resources (both programmer time, and system resources) until we need to make a particular access pattern work, and then we can optimise it for how we need it. Apart from cost/schedule, YDNI is also important because you can't predict future requirements well -- trying to anticipate too much by putting in too much structure between components actually works against you rather than for you, giving you into patterns you actually would not have wanted. In other words, too much structure costs a lot to make and can tie you down as much as it can guide you.

'4' is definitely something OOP-heavy coding helps with. However, you can achieve equivalent things in simpler designs also.

'5' is another win for OOP-heavy systems, but it does kind of assume you are employing code monkeys, and that is never going to work however much you try and mollycoddle them.

'6' is something OOP-heavy systems do very well, but read on.

As you can see, simpler designs solve the most important concerns best, and then remaining concerns are well served by OOP-heavy designs. However, our ocPortal design is not actually a naive simple design at all -- it's actually very carefully structured, and has a high degree of strictness/discipline in many areas. ocPortal is definitely not anti-OOP by any means, it is only anti-over-engineering -- we actually rely on the strengths of OOP in many key areas of the system. Here's how our approach works to achieve the commonly-cited OOP-heavy advantages (flexibility, maintainability, clarity, and stability) without slowing development, complicating code, or hurting performance:
 - We can achieve the equivalence to dependency injection as our output and execution context states support a stack-based switching mechanism, allowing us to create sandboxes very effectively for those few cases where it is useful. The critical difference is we achieve it in far less code, with better performance, in a way that is easier to understand, and where the burden for it is only felt when you actually need this advanced functionality, rather every time you use any component of the system.
 - We can achieve inheritance via our code overrides system, which also provides the ability for users to override components without having to get down and dirty with coding. Different versions of code can be placed and tested as overrides, and new functionality can be placed using overrides. This does not suffer from the same problems as copy and paste coding, as overrides are designed to work on the function level, via some clever code we have in place, and we can even make line-by-line changes should we need to, or extend individual functions.
 - We do have unit tests to test critical functionality. Admittedly these are more prone to break if we start redesigning stuff without confirming the interfaces used by the unit tests are still appropriate, but the difference is really not that much.
 - We keep a very tight rein on global variables that we define. There is a formal naming scheme, and we have an automated test that scans the codebase and verifies that we don't start accessing any of them all over the place. Generally a global belongs in the file it is defined in, and from this point of view the source code files are like classes -- the globals in them are their private properties. In essence, rather than enforcing this through verbose code plumbing and memory consumption, we automatically enforce it through automated testing for compliance to our coding standards. If a global is allowed for multiple access in different places (usually for performance), then we have a rule that it has to be given a formal annotation to what it does.
 - We have the ability (via APIs and simple glue objects) to 'reflect' on content types within ocPortal in a really abstract way, even though the content types aren't defined by "fat objects". This provides the same power that rigid conformability allows, but without hurting performance or actually requiring rigid conformability.

The ocPortal design is actually based on how PHP is supposed to work, rather than Java-envy. Critics often think of PHP as inelegant, and it is true there are a lot of consistencies in the language and that some old legacy PHP features (that we don't use) were very poorly designed -- but PHP is also widely popular because it is cost effective and easy to use, and this has been proven with top sites like Facebook using it. PHP is built on the concept that web requests should be simple and fast -- they should get straight to the point and get what is needed done, and this is why PHP runs each request in its own 'sandbox' rather than as a thread on an application server. Web requests start up, do what they need to do, then are killed off. We therefore design ocPortal around the idea that these web requests are simple and fast, rather than trying to build a castle in the sky for a process that will terminate anyway as soon as its finished sending a result back. PHP environment access is based around 'super globals', just like ocPortal's access to key interfaces is -- like the database connections. However, we improve super globals by adding the stack based context switching functionality described earlier.

So... hopefully you can now see past the anal arguments some people make that everything should be designed a certain way -- an expensive, complex, way, that performs really poorly in the name of a theoretical but unrealisable maintainability. Don't believe any methodology's hype without doing a good analysis first -- maintainability really comes down to the efforts the team does in keeping a codebase tidy and consistent, not much else. As good engineers we also know we want a framework that provides the most efficient possible coding method, in addition to the robustness, flexibility, and maintainability that we need. Knuckling down and over-engineering everything is going to make coding progress very slow/expensive and probably going to make code less maintainable rather than more maintainable -- "simple by default" is a better plan if implemented with care and maintained with agility.

Rant over ;).

[title="2"]Troubleshooting[/title]

There are a number of issues developers face when programming for ocPortal. Our high standards and development mode means issues are raised to the surface that less skilled programmers may not easily notice when working with other systems.

[title="3"]XHTML[/title]

ocPortal is coded against XHTML5, which is the XHTML version of HTML5. In other words, it is a stricter (in a good way) version of HTML5.

The extra strictness of XHTML is now largely historic, as no websites (including ocPortal) truly force the browser to enable the full XHTML-strictness, while browser XHTML modes aren't cut-down like they once were.
Never-the-less, it encourages good coding discipline -- clean, intuitive code.

ocPortal notes:
 - Ideally do not use the [tt].innerHTML[/tt] Javascript property. Instead you will should use the ocPortal  [tt]set_inner_html[/tt] and [tt]get_inner_html[/tt] functions that ocPortal supplies. Our functions have been carefully tuned over the years to work on all browsers to handle things like embedded Javascript code in a consistent way.

[title="3"]MySQL errors[/title]

ocPortal is not just built for MySQL. It is designed to work with any kind of database software. It is all to common for developers to assume specifics of the MySQL platform are standard SQL and can be used freely. MySQL in fact is very non-standard in certain ways. ocPortal enables "MySQL strict mode" to force MySQL to (correctly) complain when mistakes (such as non-specified field values) are made.

If is advisable for you to:
 - code SQL conservatively and not try use things ocPortal does not already use
 - avoid being sloppy and getting MySQL to perform automatic type conversions and to automatically guess missing values during insert queries.

[title="3"]Tempcode[/title]

A common mistake is to use Tempcode objects as strings. These are not strings, and can't be used as strings unless you do something like [tt]$string=$tempcode->evaluate();[/tt] to get the string equivalent first. We can't rely on PHP 5's [tt]__toString[/tt] functionality in ocPortal unfortunately (and we don't want to actually, because that makes the code a bit harder to analyse).

[title="3"]Blank pages[/title]

If you find you are getting a blank page it is likely because you either have exceeded the PHP memory limit, or a PHP parse error has happened.

You can often find out what the error was by putting [tt]&keep_show_parse_errors=1[/tt] into the URL. This will make ocPortal run slower and it might introduce some weirdness, but it often will also reveal the errors. Additionally, enabling the PHP [tt]display_errors[/tt] and [tt]display_startup_errors[/tt] in your main [tt]php.ini[/tt] is a good idea (for a development server only).

Sometimes this advice will not help: if there is an "@" (error suppression operator) somewhere above the function call chain for where a fatal error happened then this will make fatal errors result in a silent blank screen. ocPortal cannot detect them. You should use "@" sparingly anyway.

[title="3"]Query limits[/title]

If you get errors about query limits consider optimising your code to use less queries. If you cannot do this, you can set:
[code="PHP"]
$GLOBALS['NO_QUERY_LIMIT']=true;
[/code]
in your code.

You can also put [tt]&keep_no_query_limit=1[/tt] into the URL to have query limits temporarily disabled. Often when caching is disabled or empty the query limit can be exceeded.

[title="3"]Debugging[/title]

If development mode is running then the [tt]inspect[/tt] function will be available in PHP. You can run commands like:
[code="PHP"]
inspect($a,$b,$c);
[/code]
and ocPortal will output the contents of these variables very neatly for you, and give a stack trace.

If output has already started then ocPortal will give you your details in an info box at the bottom of the rendered screen; otherwise you'll get a text dump.

This is very useful when stepping through code. Often bugs are because you are using the wrong data types (e.g. Tempcode objects being treated as strings). Temporarily placing inspect calls in your code and moving them along as you analyse exactly what is happening is a good way to test exactly what is happening for the occasions when the automatic stack dumps are not available or do not reveal the real cause of the problem.

If you have an IDE with a debugger then this is better, but we find most developers do not have one, and also PHP debuggers tend to be quite unreliable. This old fashioned manual technique of manually tracing through code works well if you are quick at making changes and refreshing the browser window.

[title="2"]Tips[/title]

[title="3"]Form fields[/title]

To save time and auto-populate form fields during testing, if you have the Web developers toolbar extension for Firefox, you can right click, then choose: Web Developer --> Forms --> Populate form fields.

[title="3"]Debugging CSS[/title]

Use the Firefox Firebug extension's 'Inspect' tool, or an equivalent utility in your web browser of choice. It will save you a lot of time.

[title="3"]Debugging Javascript[/title]

Use the Firefox Firebug extension's Javascript breakpoint facility, or an equivalent utility in your web browser of choice. It will save you a lot of time.

[title="2"]Advanced deployment and customisation[/title]

[title="3"]Hidden features inside ocPortal[/title]

ocPortal contains a number of hidden 'values', 'keep' parameters, and empty file flags. These allow activation of special functionality that isn't considered important/mainstream enough to warrant user-interface space within ocPortal.

[title="3"]Empty files[/title]

The presence of the following empty files in the root directory have a special meaning to ocPortal:
 - [tt]install_ok[/tt] -- don't complain if [tt]install.php[/tt] is left present (DO NOT use this unless your install is not connected to the Internet or if you definitely have an install_locked file)
 - [tt]install_locked[/tt] -- whether to lock the installer (prevent it running)

[title="3"]Other special files[/title]

If you put a file called [tt]closed.html[/tt] then this will be shown to people rather than the normal closed-site screen, regardless of whether the site is currently closed or not.

[title="3"]Hidden 'values'[/title]

Values are like hidden configuration options. They are either hidden because they are managed by code (perhaps used for keeping track of something), or because they are obscure. To set a value, open up OcCLE (under the 'tools' section in the Admin Zone or clicking the symbol at the bottom-left of any page) and type [tt]:set_value('<name>','1');[/tt] (replace '1' if appropriate, but usually we do use '1' to enable). In normal PHP code, you can use the same [tt]set_value[/tt] function, and also the [tt]get_value[/tt] function. You can automatically add a new hidden value just by setting it for the first time.

We have the following which are either unlikely to be useful, or potentially unstable or unpolished:
 - Integrations
  - [tt]force_admin_auth[/tt] -- set this to '1' if you want any super-administrator to have to have some kind of authorisation-based login by redirecting them to [tt]http://base_url/admin_login/[/tt] which presumably you have configured to be a redirect-through that catches logins (Apache only)
  - [tt]no_password_hashing[/tt] -- set this to '1' if you want passwords to be stored as plain-text in the database (not recommended)
  - [tt]xhtml_strict[/tt] -- set this to '1' to do some magic to make ocPortal's output XHTML strict. This is slow and not really advisable as it will degrade the user experience if Javascript is not available (new-window links would break)
  - [tt]webdav_root[/tt] -- set this to the subdirectory the WebDAV addon should run from. On Windows it needs to run from the root, i.e. '/'. However, to do this you would need to map onto a separate domain name. If you change this setting, you'll need to change the redirect in your [tt].htaccess[/tt] file
 - Unsupported functionality
  - [tt]unofficial_ecommerce[/tt] -- set to '1' if your forum driver contains usergroup manipulation functions (we don't support this, but wanted to be able to allow those willing to extend forum drivers to use our full eCommerce framework)
 - Workarounds for difficult server configurations
  - [tt]disable_iconv[/tt] -- set this to '1' if your iconv extension causes PHP to crash
  - [tt]disable_mbstring[/tt] -- set this to '1' if your mbstring extension causes PHP to crash
  - [tt]prefer_curl[/tt] -- set this to '1' if the server requires you to not use network sockets directly from PHP and instead use the CuRL extension (although if you need this it is likely you actually need to just configure the proxy server options instead)
  - [tt]real_memory_available_mb[/tt] -- set this to the number of MB GD should consider available for image generation, if PHP is lying about it's memory limit
  - [tt]alternate_search_join_type[/tt] -- set this to '1' if your database server does 'JOIN' translate table searches intractably slowly, and 'LEFT JOIN' ones fast. This is the exact opposite of the behaviour of most MySQL versions, but we think we have seen a case of this so on some MySQL servers to make catalogue searches tractable you might need to enable this
  - [tt]http_faux_loopback[/tt] -- a regular expression of URLs that may be accessed via direct filesystem reading rather than HTTP loopback. Be very careful with this, as it could seriously harm security. It can improve performance however. Some poor web hosts may also require it (we've only seen one though). It does support PHP scripts, which are given special treatment, via passing through the [tt]php-cgi[/tt] interpreter (file uploads and POST requests not supported). Set via a command such as: [code]:set_value('http_faux_loopback','^'.preg_quote(get_base_url(),'#').'.*\.(php|jpg|jpeg|png|gif|htm|html|ico|txt|css|js|cur|tar|gz|mp3|mp4|m4v|mpg|mpeg|pdf|svg|swf|ttf|woff|wav|zip|xsd|xsl|xml|webm)\??');[/code]
  - [tt]base64_emails[/tt] -- set this to '1' if you want base64 emails to be used. These are more robust (PHP's wordwrapping, which we use to make non-base-64 emails compliant, can be buggy) but some servers do not like them or consider them very slightly more spammy
  - [tt]cloudflare_workaround[/tt] -- set this to '1' if you need to fix the IP address of requests marked as coming from CloudFlare.
  - [tt]disable_openssl[/tt] -- set this to '1' if you are on Windows and PHP<5.3.4, which has a bug in [tt]openssl_random_pseudo_bytes[/tt]. It is much better to upgrade PHP though, for better security.
  - [tt]disable_ssl_for__<domain>[/tt] -- set this to '1' to disable SSL certificate checking for the given domain name. This is not a great idea, but may be necessary if a required service has a broken certificate yet it only supports HTTPS.
  - [tt]manualproc_mail[/tt] -- set this to '1' to debug problems with the PHP mail command (the PHP mail command won't relay error information from the sendmail process, this will replace it with something that does); it only works on servers that allow PHP process control
 - Used internally by ocPortal
  - [tt]cdn[/tt] -- this is used for storage of autodetected CDNs, prior to the config option for them being properly filled in
  - [tt]brand_base_url[/tt] -- the base URL to the brand site (by default this is ocPortal.com but may be changed)
  - [tt]rebrand_name[/tt] -- if ocPortal is called something else as far as the site staff are concerned, set the name here
  - [tt]rebrand_base_url[/tt] -- to change where branding URLs go to (e.g. the stub that is used when linking to documentation), set it here
  - [tt]company_name[/tt] -- if ocPortal is being rebranded to be 'made' by another company, set the name here (this has no effect of copyright of course, but ocProducts allows this)
 - Developer testing
  - [tt]notification_safety_testing[/tt] -- set this to '1' to enable extra checks to ensure notifications or welcome emails don't get mistargeted/over-sent
  - [tt]memory_tracking[/tt] -- set this to the number of megabytes peak memory usage after which you want the execution URL to be silently logged to the error log (useful for debugging memory usage on a live site). The value must be an integer, with no trailing 'M'. This does not impose a memory limit, which is 64MB by default in ocPortal, but may be turned off within certain carefully-chosen execution contexts (usually admin tasks which are necessarily memory consuming). Requires PHP 5.2+.
 - For system-integrators
  - [tt]agency_email_address[/tt] -- set this to a secondary e-mail address where you would like all error e-mails to go (the primary one being the staff address). Only set this if you are an agency and want to receive error e-mails in addition/instead of your client
 - For back-end developers
  - [tt]textmate[/tt] -- set this to '1' if you are developing on a local machine and use the Apple Mac TextMate editor. It will cause TextMate editing links to come up in stack traces
  - [tt]allow_php_in_templates[/tt] -- set this to '1' to enable the undocumented Tempcode 'PHP' directive, and it's short-hand syntax (written like normal PHP long-tags). This allows you to write PHP code inside templates, but please aware there are strong risks associated with this. It means that themes you install may contain PHP code, or people submitting Comcode content may put in PHP code which you could accidentally unwittingly activate when validating content (as it would be validated against your own security credentials)
 - Low-level tuning
  - [tt]no_individual_gallery_view[/tt] -- set this to '1' if all images/videos in a flow-mode gallery must be viewed from the flow-mode view (never individually)
  - [tt]no_confirm_url_spec_cats[/tt] -- set this to '1' if you don't want to have to confirm the category for a new catalogue entry when the category was specified in a URL parameter already
  - [tt]no_spec_cat__<catalogue-name>[/tt] -- set this to '1' if you don't want to have to confirm the category for a new catalogue entry when the category was specified in a URL parameter already
  - [tt]comment_forum__galleries[/tt] / [tt]comment_forum__images[/tt] / [tt]comment_forum__videos[/tt] / [tt]comment_forum__downloads[/tt] / [tt]comment_forum__calendar[/tt] / [tt]comment_forum__news[/tt] / [tt]comment_forum__polls[/tt] -- override the comment forum for a particular content type
  - [tt]comment_forum__catalogues_<catalogue-name>[/tt] -- define a comment forum for a specific catalogue
  - [tt]allow_no_lang_selection[/tt] -- set this to '1' if you want members to be able to leave their language selection as 'Unset' (otherwise normally it'll copy the auto-detected language into their profile or they can change it, but it never stays as unset). This option is useful on multi-site-networks, with each site having a different language
  - [tt]no_base_check[/tt] -- set this to '1' if you do not want ocPortal to empty caches if the base URL gets changed (this is if the base URL is not defined, and someone accesses from something different)
  - [tt]pagination_when_not_needed[/tt] -- set this to '1' if you want the pagination wrapper template to load even if there is no pagination (useful for collecting result meta data via Tempcode)
  - [tt]catalogue_seo_source_map__<catalogue-name>[/tt] -- a comma-separated list of field IDs to use for SEO keyword generation (if not set, uses all fields). If all keywords in the field should be used, put an exclamation mark after the field ID
  - [tt]disable_password_change_notifications_for_staff[/tt] -- set this to '1' if you want staff password edits to not result in notifications to users
  - [tt]commercial_spellchecker[/tt] -- set this to '1' if you want to enable the WYSIWYG editor's spellcheck.net spellchecker
  - [tt]ocselect_protected_fields[/tt] -- a comma-separated list of fields ocSelect cannot work on (above the ones hard-coded as forbidden)
  - [tt]memory_limit[/tt] -- set this to a memory limit to override ocPortal's built in one (e.g. "128M"). This will make memory bugs on your server more dangerous, so use at your own risk (a memory usage problem can take down a whole server) -- although memory bugs are unlikely given that ocPortal users report if they ever see this error
  - [tt]canonical_keep_params[/tt] -- set this to a comma-separated list of keep_ parameters that should be allowed to propagate within search engines
  - [tt]no_tech_login_messages[/tt] -- set to '1' if you don't want technical explanations attaching when a user is forced to login
  - [tt]cc_sort_date__<catalogue-name>[/tt] -- set this to '1' if you want catalogue category children to be sorted by date rather than title
  - [tt]resize_rep_images[/tt] -- set this to '0' if you do not want uploaded rep-images to be sized down automatically to the standard thumbnail size
  - [tt]default_event_type[/tt] -- set this to the ID of the default event type to select for new events
  - [tt]edit_with_my_comcode_perms[/tt] -- set this to '1' if content you edit should render with your Comcode permissions. Only enable this if you trust yourself to spot XSS attacks.
  - [tt]site_location[/tt] -- an address for where your website is, sometimes used in meta-data.
  - [tt]google_news_urls[/tt] -- set this to '1' if news URLs should contain a Google-News-friendly entry ID.
  - [tt]enable_delayed_inserts[/tt] -- set this to '1' to enable MySQL delayed inserts. Delayed inserts can cause a very small performance improvement if log calculations happen quite regularly; however they only work on MyISAM tables and are deprecated as of MySQL 5.6
  - [tt]really_want_highlighting[/tt] -- set this to '1' if you want to force HTML to be converted to Comcode when searches happen, so keyword highlighting works better.
 - Performance tuning (positive) [not official options as will break normal expectations of how the system will behave / complicate things]
  - [tt]lots_of_data_in_*[/tt] -- set this to '1', with '*' replaced with a database table name, if you want the ocFilter mechanism to work with recursive db lookups rather than one huge flat lookup
  - [tt]disable_cat_cat_perms[/tt] -- set this to '1' if you want to disable catalogue category permissions
  - [tt]catalogue_limit_cat_field_load__<cataloguename>[/tt] -- set this to '1' if you want that catalogue to not have all fields loaded on category views, an optimisation that reduces templating flexibility
  - [tt]no_catalogue_field_assembly[/tt] -- set this to '1' if you want catalogue entries to be 100% hand-templated; removing this will improve performance but remove pre-assembly
  - [tt]no_catalogue_field_assembly_fieldmaps[/tt] -- see above, but only if fieldmap assembly not required
  - [tt]no_catalogue_field_assembly_grid[/tt] -- see above, but only if grid assembly not required
  - [tt]no_catalogue_field_assembly_tabular[/tt] -- see above, but only if tabular assembly not required
  - [tt]assume_modules_correct[/tt] -- set to '1' if module auto-installation/auto-upgrade should not happen; this will improve performance
  - [tt]no_priority_redirects[/tt] -- set to '1' if redirects should only be considered if a page cannot be found via other means
  - [tt]no_tags[/tt] -- set to '1' if you don't want tags to be generated (small performance tweak)
  - [tt]no_awards_in_titles[/tt] -- set this to '1' if you don't want awards to be displayed on content screens (small performance improvement)
  - [tt]disable_user_online_counting[/tt] -- set this to '1' if you don't want to count online users (small performance improvement)
  - [tt]no_banner_count_updates[/tt] -- set this to '1' if you don't want to maintain banner view counts (small performance improvement)
  - [tt]pinpoint_submitban_check[/tt] -- set this to '1' if you only want submitter ban checks to occur in the CMS zone (small performance improvement)
  - [tt]no_block_timeout[/tt] -- set this to '1' if blocks should never timeout (stops stuttered performance if a site is not used regularly)
  - [tt]disable_sitemap_for__*[/tt] -- disable sitemap generation for a particular page (e.g. if there's too much data in it and the server can't cope, and the data isn't so important anyway). Replace '*' with the page name
  - [tt]no_view_counts[/tt] -- set this to '1' if you don't want view counts to be maintained (reduces database writes). You will probably want to disable the normal "Reveal usage figures" option too, to hide all the zero counts
  - [tt]avoid_normal_topic_history[/tt] -- set this to '1' if you don't want topic-read history to be maintained for things other than private topics
  - [tt]no_member_tracking[/tt] -- set this to '1' if you want to disable the member tracking feature where it's supported (it shows who is viewing a forum topic, for example)
  - [tt]min_lastvisit_frequency[/tt] -- set this to the number of seconds waited between the last-visit time being updated (performance tweak, minimises database writes)
  - [tt]no_flood_control[/tt] -- set this to '1' if you will not have flood control
  - [tt]implicit_usergroup_sync[/tt] -- set this to '1' to enable synching of implicit usergroups (see the advanced members tutorial for more information)
  - [tt]shortened_tempcode[/tt] -- set this to '1' to not store parameter reference origins in Tempcode, which makes Tempcode use less memory/storage/CPU
  - [tt]advanced_admin_cache[/tt] -- set this to '1' to enable the Advanced Admin Cache (AAC). The AAC loads fully cached pages for administrators whilst checking the server for any updates. The result is that you see a cached page for about 1 second until the latest version is retrieved, making browsing feel much snappier. This feature is highly experimental, and only works on the very fast modern web browsers: Google Chrome, Opera, and Safari. It may be unstable even in these browsers though. If your site is on a shared domain where other users can run their own Javascript code then you should not use it as it will lead to a serious security vulnerability.
  - [tt]save_jpegs_as_png[/tt] -- set this to '1' to allow ocPortal to detect when JPEG files would be smaller, and save JPEG data into PNG file extensions. It is a bit of a hack, and goes against standards, but works well
 - Performance tuning (negative)
  - [tt]allow_admin_in_other_zones[/tt] -- set this to '1' if you want to allow admin and CMS modules to run in other zones (small performance cost)
 - Easter eggs
  - [tt]stupidity_mode[/tt] -- set to 'leet' or 'bork', for a fun April Fools-style Comcode joke (clear the Comcode cache after you're done though)
 - Debugging
  - [tt]permission_log_success_too[/tt] -- set this to '1' if you want the permission log file ([tt]data_custom/permissioncheckslog.php[/tt]) to show both successful and unsuccessful permission checks. Usually it only shows fails.

[title="3"]Hidden 'keep' parameters[/title]

'keep' parameters are placed inside URLs in order to give ocPortal some extra information when loading a page. Their URL-presence is automatically relayed/preserved in all ocPortal links within the page. To enable a 'keep' parameter, simply append [tt]&<name>=1[/tt] to the URL (replace '1' if appropriate, but usually we do use '1' to enable). If there are no parameters in the URL and short-URLs are not enabled, use a '?' instead of a '&'.

The 'keep' parameters available are:
 - [tt]keep_cache[/tt] -- set to '1' to temporarily enable cacheing or '0' to temporarily disable. You can also use 'cache' so it works on a per-page basis, with the exception of this not affecting the template and language cacheing.
 - [tt]keep_no_dev_mode[/tt] -- set to '1' to disable development mode (which only runs if you're working out of a subversion repository anyway)
 - [tt]keep_no_ext_check[/tt] -- set to '1' to force the validator to not check dependency files
 - [tt]keep_force_htaccess[/tt] -- set to '1' to force the OCF login to go via htauth in precedence over other login methods (e.g. login cookies, sessions)
 - [tt]keep_textonly[/tt] -- set to '1' if the 'text only' stylesheet is to be used
 - [tt]keep_simplified_donext[/tt] -- set to '1' to temporarily act as if the simplified do-next option is turned on
 - [tt]keep_mobile[/tt] -- set to '1' to pretend you're using a PDA
 - [tt]keep_has_js[/tt] -- set to '1' to force ocPortal to think you have Javascript (useful if the has-JS cookie isn't saving yet you need to use a JS-based interface)
 - [tt]keep_ldap_debug[/tt] -- set to '1' to forcefully show LDAP errors, when suppressing them might normally be wise due to over-sensitivity
 - [tt]keep_hide_mail_failure[/tt] -- set to '1' if you want to avoid showing e-mailing errors
 - [tt]keep_huge[/tt] -- set to '1' if you want to override the precautionary filesize check used by the JS validator
 - [tt]keep_show_query[/tt] -- set to '1' if you want the SQL query used by a search to be echoed out
 - [tt]keep_just_show_query[/tt] -- set to '1' if you want ocPortal to echo out the query as above, but then to exit before running it
 - [tt]keep_currency[/tt] -- set to an ISO currency code to tell ocPortal which currency you use
 - [tt]keep_country[/tt] -- set to an ISO country code to tell ocPortal which currency you're in
 - [tt]keep_cat_display_type[/tt] -- set to a number representing the catalogue category display-type to try out (0=entry-tables, 1=lists, 2=matrix)
 - [tt]keep_id_order[/tt] -- use this in conjunction with the admin_ocf_groups page to force a usergroup reordering based on the named DB field of your choice
 - [tt]keep_backup_alien[/tt] -- set this to '1' if the backup module should only be backing up non-ocPortal files (i.e. do a backup of the website, but not the software)
 - [tt]keep_module_dangerous[/tt] -- set this to '1' to allow uninstallation of modules that are locked
 - [tt]keep_preserve_ids[/tt] -- set this to '1' when doing an OCP-merge import, to preserve ID's in the import (and not import duplicated ID's); this is not supported officially
 - [tt]keep_theme[/tt] -- set this to a theme name, to temporarily try out a different theme
 - [tt]keep_safe_mode[/tt] -- set this to '1' so that where possible, any customised files will be ignored; the default theme will be used
 - [tt]keep_no_output_streaming[/tt] -- set this to '1' to disable output streaming (i.e. enable full pre-processing)
 - [tt]keep_fatalistic[/tt] -- set this to '1' if terminal warning errors should be handled as terminal fatal errors (which include stack traces); useful for debugging the origin of an error message
 - [tt]keep_firephp[/tt] -- set this to '1' to dump permissions checks that occurred to [url="FirePHP"]http://www.firephp.org/[/url]. It only works for authenticated administrators, but if the administrator is using '[tt]keep_su[/tt]' to masquerade as another user it will work (which is particularly useful for debugging permissions problems).
 - [tt]keep_firephp_queries[/tt] -- set this to '1' to dump queries that occurred to [url="FirePHP"]http://www.firephp.org/[/url]. It only works for authenticated administrators, but if the administrator is using '[tt]keep_su[/tt]' to masquerade as another user it will work.
 - [tt]keep_show_parse_errors[/tt] -- set this to '1' if you think you have a corrupt PHP file but you can't tell which as your PHP display errors option isn't on (and hence just get blank screens). This will allow ocPortal to generate stack traces for most corrupt files it tries to include. Note another cause of blank screens can be the PHP memory limit being exceeded.
 - [tt]keep_send_immediately[/tt] -- set this to '1' if you want to debug newsletter code, and not have newsletters sent in the background
 - [tt]keep_su_online[/tt] -- set this to '1' if you want the user '[tt]keep_su[/tt]' is used with to also show as online, and for their last online/submit statuses to be updated
 - [tt]keep_no_minify[/tt] -- set this to '1' if you want to use a Javascript debugger and hence do not want the JS to be minified (unreadable)
 - [tt]keep_show_loading[/tt] -- set this to '1' if you want comments inside the HTML source showing memory usage taken up as server-side scripts load
 - [tt]keep_no_swfupload[/tt] -- set this to '1' if you don't want the flash uploader to be used
 - [tt]keep_avoid_memory_limit[/tt] -- do not put on a memory limit; using this will also add in the option to remove paginations, for those with the remove_page_split privilege
 - [tt]keep_no_query_limit[/tt] -- do not place a query limit during development mode
 - [tt]keep_on_same_msn[/tt] -- set this to '0' if you are doing an ocPortal site merge import and want to force OCF content to import even if the importer thinks that you are on the same MSN as the other site
 - [tt]keep_theme_test[/tt] -- set this to '1' if you are testing lots of themes. It will cause installed theme addons to have their Comcode pages extracted with a special prefix, it will remove that prefix on addon packaging, and page detection will give preference to the prefix for the particular theme you are currently using (so use in conjunction with keep_theme).
 - [tt]keep_debug_notifications[/tt] -- set this to '1' if you are debugging the notifications system and therefore need them to be sent before the page output finishes
 - [tt]keep_debug_tasks[/tt] -- set this to '1' if you are debugging the tasks system and therefore need them to be run immediately (i.e. without going into the task queue)
 - [tt]keep_devtest[/tt] -- used during development mode to test URL building is working correctly, of no use manually
 - [tt]keep_debug_has_cookies[/tt] -- useful for developers to tell ocPortal cookies are supported when Javascript may be off
 - [tt]keep_memory_limit_test[/tt] -- set to a number of megabytes under 32 to reduce the memory limit to this value; useful for performance debugging
 - [tt]keep_no_chain[/tt] -- useful when working with the XML forum driver, tells it to not do reads from the configured chain database
 - [tt]keep_realtime_test[/tt] -- used for testing the realtime feature's display (it injects random data)
 - [tt]keep_simpleurls[/tt] -- disable short URLs
 - [tt]keep_wide[/tt] -- remove panels
 - [tt]keep_wide_high[/tt] -- remove panels, as well as the header and footer
 - [tt]keep_rating_test[/tt] -- set this to '1' if you are testing rating and don't want to be locked out for having already rated
 - [tt]keep_all_cpfs[/tt] -- set this to '1' if you want to edit bundled CPFs that aren't currently marked as editable

The following 'keep' parameters have interface triggers, but are also handy for manual activation:
 - [tt]keep_markers[/tt] -- set this to '1' if you want template start/end markers to be output in the page HTML source when viewed in ocPortal
 - [tt]keep_novalidate[/tt] -- set this to '1' to force page output validation to not occur
 - [tt]keep_su[/tt] -- set this to a username or member ID when logged in as admin, to pretend to be that member. May choose the guest member ('Guest' on OCF by default).
 - [tt]keep_theme_seed[/tt] -- set this to kiddie or random or a 6-character HTML colour code, to get dynamic themegen going for your page view (this is very slow, but fun!); you must be staff, with a confirmed session, for this to work
 - [tt]keep_theme_dark[/tt] -- used in conjunction with keep_theme_seed; set to '1' if it is a dark seed
 - [tt]keep_theme_source[/tt] -- used in conjunction with keep_theme_seed; set to the name of the theme being used as the source
 - [tt]keep_theme_algorithm[/tt] -- used in conjunction with keep_theme_seed; set this to 'equations' or 'hsv' to set the theme algoritm
 - [tt]keep_print[/tt] -- set this to '1' to render a 'printer friendly' version of the page
 - [tt]keep_lang[/tt] -- set to a two-letter ISO language code to tell ocPortal which language to use
 - [tt]keep_session[/tt] -- this isn't useful for manual editing, but it is used to note session-IDs when [session-]cookies are not working
 - [tt]keep_timezone[/tt] -- this is the timezone code (tz style) to view in
 - [tt]keep_catalogue_<catalogue-name>_root[/tt] -- set to a category ID for the current viewed content type to trick the breadcrumbs into showing a 'virtual root'; this can also be activated by browsing to the category you'd like to be virtual root (as staff) and then clicking on the final link in the breacrumb chain (the link representing the current category)
 - [tt]keep_wiki_root[/tt] -- as above, but used to propagate Wiki+ virtual roots
 - [tt]keep_gallery_root[/tt] -- as above, but used to propagate gallery virtual roots
 - [tt]keep_download_root[/tt] -- as above, but used to propagate download virtual roots
 - [tt]keep_forum_root[/tt] -- as above, but used to propagate forum virtual roots
 - [tt]keep_page_root[/tt] -- as above, but used to propagate Comcode page virtual roots

The following aren't 'keep' parameters, but are still useful and otherwise behave in the same way:
 - [tt]auth[/tt] -- set to '1' to make ocPortal request HTTP authentication. This is useful for RSS URLs, if you want the feeds to be generated as authenticated.
 - [tt]wide[/tt] -- set to '1' if you don't want to show side panels
 - [tt]wide_high[/tt] -- set to '1' if you don't show to show panels or the TOP/BOTTOM
 - [tt]start[/tt] -- set to the start number in the result browsing
 - [tt]max[/tt] -- set to the maximum number of results to show per-page
 - [tt]page/type/id[/tt] -- standard URL routing parameters
 - [tt]kfsXX[/tt] -- this isn't useful for manual editing but people ask what it's for; it's to preserve the browse positions in forumviews, such that when returning, the browse positions are remembered

[title="3"]Extra info.php settings[/title]

Setting,
[code]
$SITE_INFO['no_email_output']='1';
[/code]
in [tt]info.php[/tt] will disable emails. This is useful on a development server running with live user accounts.

[title="3"]Hints for making websites for other people[/title]

ocPortal is a great platform for web developers. A web developer can build all kinds of sites using ocPortal -- from simple new media sites, to social networks, to seeminly-bespoke sites such as property directories.

However, if you're making a website for somebody else it is is important to bear in mind they probably do not want to learn ocPortal like you have.

Here are some hints:
 - You might want to use the 'debranding' feature in the Admin Zone (Tools section)
 - You might want to give the user a non-admin username (e.g. a super-moderator user instead), and then set Admin Zone permissions so that many unnecessary pages are hidden. ocPortal is then smart enough to automatically simplify it's interface to compensate.
 - If you have to hand code a Comcode page with HTML then include the following hint in it: [tt]{$,page hint: no_smart_conversion}[/tt]. This will stop the WYSIWYG editor trying to convert the HTML back into Comcode, which can mess up hand-crafted markup and CSS (normally WYSIWYG only guarantees to preserve style/structure created within itself).
 - If for some reason you don't want the WYSIWYG editor to run for a page (e.g. if it has a Google ad on, that can cause the editor to malfunction) then include the following hint in it: [tt]{$,page hint: no_wysiwyg}[/tt]
 - When deploying make sure to get your canonical URL right. Ask the client whether they want 'www.' in their URL or not. Set up a .htaccess file (http://seoclass.org/canonical-redirects-htaccess-and-seo) that redirects the non-canonical URL to the correct one. This will remove a lot of headaches related to duplicate cookies, bad SEO, confusion, and ocPortal error messages.
 - Always, always, test the e-mails a site gives out. It is very embarrassing if you accidentally customise your [tt]MAIL.tpl[/tt] template in a custom theme and then find e-mails are being sent out of the Admin Zone using the default theme and ocPortal logo. Always save your [tt]MAIL.tpl[/tt] in the default theme, and make sure that the default theme's 'logo/-logo' and 'logo/standalone-logo' theme images correctly reflect your design. And, test it! If you made complex changes, test in different e-mail programs/webmail-apps.
 - Develop using a staging/developer website, and deploy to live/customer-demo after you've finished all changes. This primarily involves uploading changed files. ocPortal 4.2+ has a great tool for transferring data between ocPortal sites using XML too, if you find you are needing to sync data.
 - If there are separate frontend and backend developers, the frontend developer can do an effective mockup by coding a simple minimodule/miniblock that uses a static array of data passed directly into templates. This way the built CSS and markup is "ocPortal ready" (particularly things like the 'IMG' symbol can be used from the start). This requires the frontend developer to have basic PHP and Tempcode experience.
 - In particular, do not make theme image changes using ocPortal's theme editor, as these are really painful to sync. Make use of ocPortal's automatic theme image detection by simply saving new theme image files into appropriate directory locations; note you will need to clear the caches if you are overriding a default image.
 - Remember when uploading to a live site that you do not want to overwrite customised Comcode pages, or other files that may have since been changed. Be careful what you upload, and keep backups.
 - If you are adding new functionality and write new templates, it is best to save these into the default theme's [tt]templates_custom[/tt]/[tt]css_custom[/tt] directories, so that your functionality works on all themes. If you are overriding default theme templates/CSS, it is then that you save them into your site's theme. A similar rule applies for custom images.

It's overkill to apply the full range of ocPortal coding standards if you're writing PHP code for use on just one website. You shouldn't get into bad habits by skipping any of the conventions but some of our standards are particularly time consuming to meet, and in particular the following time savers can be applied:
 - It is better to have "hackerish" overrides (using the code rewrite facility) than to override whole files. This is because it makes upgrades easy, which is far more important than code maintenance for a one-off ocPortal project.
 - You can almost always assume the site runs one theme and thus save your new templates into the new theme. One caveat is the 'CMS' zone will need to run your theme, and also bear in mind that any files used in outgoing emails must be available from the default theme.
 - You don't need to write everything using language strings.
 - You don't need full MVC. For example, you could code in add/edit functionality straight into modules rather than via a sources file (model).
 - You can make more assumptions than you ordinarily would be able to. For example, you might be able to assume cURL is installed. It is sensible to document your assumptions though, to make sure they continue to be met, or so someone breaking them has an idea that they need to act to change your code.
 - For simple dynamic functionality you can use minimodules and miniblocks instead of full blown object-orientated modules and blocks.
 - You do not need to write PHPdoc comments unless you think other developer's would benefit from them.
 - On some sites you may be able to assume Javascript is enabled, or that accessibility isn't an issue (e.g. on a video site it's unlikely to need to cater for blind users -- unless you plan to support audio description). Generally we would advise to be very cautious here, it usually does not take much longer to support full accessibility, and is worth doing routinely. But it is worth us pointing this out because some sites may require particular complex Javascript interfaces and it might be unviable to support Javascript being disabled.

Bear in mind that some sites need maintenance or have multiple people working on them, so you should bear this in mind when you decide the level of engineered design and code documentation to implement for your custom functionality. It is a trade-off between initial development cost, and long-term time savings.

[title="3"]Providing default parameters to forms[/title]

Many forms in ocPortal accept GET parameters for specifying default field values. This includes most 'add' forms in the system. Generally the GET parameter is exactly the same as the actual field name in the HTML, so it's easy to work it out.

We also have some special cases coded up directly. These are often referenced between different parts of the ocPortal code. The details below are divided by module, then 'type', then parameter name.
[code]
topics
 new_post
  quote
  intended_solely_for

warnings
 ad
  member_id
  post_id

admin_aggregate_types
 ad
  aggregate_type
 sync
  type

admin_ecommerce_logs
 ad
  group_id
 trigger
  type_code

admin_ocf_forums
 ad
  parent_forum
  forum_grouping_id

admin_ocf_merge_members
 misc
  from
  to

cms_authors
 _ad
  author

cms_banners
 ad
  b_type

cms_blogs
 ad
  cat
  validated

cms_booking
 ab
  bookable_id
  day
  month
  year

cms_catalogues
 add_entry
  catalogue_name
  category_id / category_id_suggest
  field_*
  validated
 add_category
  catalogue_name
  parent_id
 add_catalogue
  id

cms_calendar
 ad
  date
  e_type
  validated

cms_downloads
 ad
  cat
  validated
 ac
  parent_id

cms_galleries
 gimp
  member_id
  cat
 ad
  cat
  validated
 av
  cat
  validated
 ac
  parent_id

cms_news
 ad
  cat

cms_quiz
 ad
  validated
[/code]

All default parameters are flagged as 'non-canonical' to search engines, so that the search engine knows that variations in value are not indicative of entirely separate web pages.

[title="3"]Overriding files[/title]

If you change an original ocPortal file for a client project you must save it into the [tt]_custom[/tt] equivalent of it's original directory. E.g. if you change [tt]site/pages/modules/calendar.php[/tt] you need to save into [tt]site/pages/modules_custom/calendar.php[/tt]. Otherwise if the client ever upgrades their website chances are all the customisations you've made would be lost when a newer version of the original file is placed.

This said, It's best to avoid completely overriding default files if possible, so that any bug fixes from upgrades are more likely to work. ocPortal provides some techniques so you can override just stuff you want to change rather than a whole file.
This is explained in the [page="docs:tut_framework"]The ocPortal programming framework[/page] tutorial (there are two techniques: replacing/supplementing, and progmattic alternation).

If you are considering overriding a file just so that you can add some new functions to it used by one of your new modules (for example, adding a new [tt]form_input_something[/tt] function), consider adding to a new file (or existing file in your module's addon) instead. There is no rule that says similar functions have to go together, and it makes no sense unless they are all core functions -- in fact it increases average memory usage to have excess functions defined in core files (each required-up function uses quite a lot of memory).

[title="2"]Conclusion[/title]

We're glad you've made it to the end of our Code Book. Thanks for reading this far, and we hope you find ocPortal an effective and enjoyable environment to code for.
[/surround]