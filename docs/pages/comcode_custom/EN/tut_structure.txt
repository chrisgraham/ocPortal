[title sub="Written by Chris Graham, ocProducts"]ocPortal Tutorial: ocPortal site structure[/title]

ocPortal has a number of interacting systems, that together form the structure and navigation paradigm of your website. This tutorial will detail these systems, and show how they fit together.

To view the structural contents of your website, head over to the 'Structure' section of the Admin Zone, and choose the 'Sitemap Editor' icon. The Sitemap Editor is a very powerful tool for viewing the zones, pages, and categories within your website, and will help you build up a mental picture of how everything relates.

[contents]decimal,lower-alpha[/contents]

[title="2"]Zones (sub-sites)[/title]

{!zones:DOC_ZONES}

The default zones in ocPortal are for the following purposes:
 - [b]Welcome Zone[/b]: this is a 'welcome' zone, that gives users the chance to join or login. It could be modified to act more like a 'splash screen' if you desire that
 - [b]Site[/b]: this is your main web site; it includes primary content viewing, and permission based submission, editing, and deleting features. The contents of this zone may automatically be merged into the Welcome Zone via the 'Single public zone' option, which will simplify things for you
 - [b]Collaboration Zone[/b]: this is a section for users given greater trust and tools
 - [b]Admin Zone[/b]: this is a section for site staff to manage the site
 - [b]Content Management[/b]: this is where content is added, edited and deleted
And if you are using OCF, the following additional zones are usable:
 - [b]Forum[/b]: this is where the forum resides

[title="2"]Pages[/title]

[media width="150" description="This is a detailed annotated diagram that explains ocPortal site structure" float="right"]data_custom/images/docs/structure_main.png[/media]
There are a few different types of ocPortal 'page':
 - [b]Comcode pages[/b] -- these are textual pages, written in Comcode (described in another tutorial)
 - [b]Modules[/b] -- these are formal code-based pages
 - [b]HTML pages[/b] -- these are pages written in HTML, and rarely used except for cacheing purposes
 - [b]Minimodules[/b] -- these are like modules, except much easier to write; ocProducts does not use them for core ocPortal code, as they do not have the same 'fluff' around them that we need to maintain our clean architecture, but most technical users are better off writing these (if any new modules at all!) than full modules

A page/zone combination is accessed by URL and it is invisible to the user, and most elements of ocPortal itself, what kind of pages are being used for any given URL.

There is a priority system, to define which actual page to load:
 - customised module
 - module
 - customised Comcode page (users language)
 - Comcode page (users language)
 - customised HTML page (users language)
 - HTML page (users language)
 - customised minimodule
 - minimodule
 - customised Comcode page (site default language)
 - Comcode page (site default language)
 - customised HTML page (site default language)
 - HTML page (site default language)
 - (Page is marked as missing and an option is giving to add a Comcode page)
 - Comcode pages should therefore be named not to conflict with the names of modules.

[box="HTML pages" width="25em" float="right"]HTML pages can be placed in a pages/html_custom directory. It is preferable if URLs in the file are specified in full, rather than using relative URLs; this allows the page to be moved between zones without modification. If you do use relative URLs, they will be placed relative to the ocPortal zone URL, not the directory the HTML file is in.[/box]
If you investigate the ocPortal directory structure, you will find subdirectories for these page types under a 'pages' directory in each zone. Some of the subdirectories are internally organised according to language, whilst others distinguish languages within the pages themselves. You will also notice that all the page type subdirectories have an equivalent '_custom' suffixed version. ocPortal has a convention that any page not supplied in, or edited from, the official zone source, should be placed in a '_custom' directory: these take precedence over the normal directories, forming an override system.

This system is extremely powerful, allowing you to edit any page in ocPortal, including modules, but keep track of exactly what you have edited so that problems do not occur during upgrades. ocPortal even comes with a code editor that will automatically promote files to override directories upon edit.

[title="3"]Modules[/title]

ocPortal comes with dozens of modules as standard. Most ocPortal pages are actually modules, and most of the ocPortal database tables are created by module self-installation code.

[title="3"]Entry points / Page-links[/title]

There is a simple standard in ocPortal for identifying a page accessed by URL, in a way that is not tied down to installation domain and directory, like a URL is. This standard is sometimes called an 'entry point' and sometimes called a 'page-link'; generally, an 'entry point' is a predictable 'page-link' that will work on any ocPortal installation with the same set/configuration of zones and pages. A 'page-link' on the other hand, might depend on the actual content of the site.

Page-links are commonly seen in their most simple form in the Comcode page editor. In this, a page is simply '[tt]<zone-name>:<page-name>[/tt]'. This is the simplest case, as a Comcode page will never need any parameters (although they could take them, and use them if they contain blocks that do, to the parameter relates to ocPortal rather than the page itself). Note that the Welcome Zone is given with a blank, and hence just '[tt]:<page-name>[/tt]' is written for a page in the Welcome Zone.

A more complex case is used in the menu editor, which has the ability to insert any ocPortal 'entry point' as an item on the menu. An example of an entry point is 'site:downloads:type=misc'. This points to the downloads module in the site zone, and specifies a 'type' parameter to be of value 'misc'; the URL will turn out to be like [tt]<base-url>/site/index.php?page=downloads&type=misc[/tt] (or something else such as [tt]<base-url>/site/pg/downloads/misc[/tt] if short-urls are enabled). Note that 'type' is a standard parameter name in ocPortal, used by almost all modules to segregate internal command (for instance, 'misc' in this case specifies category listing functionality, as opposed to viewing an actual download); the page-link syntax does not handle it any different, but the short-URL syntax does.

The most complex case is for a full blown 'page-link' that could not be referred to as merely a standard 'entry point', because it depends on the state of content. An example of this might be '[tt]site:downloads:type=cat:id=10[/tt]', to view the download category of ID#10.

It is also worth understanding that page-links have a long-form and a short form syntax. For simplicity I have used the long-form syntax above. The short form syntax allows you to remove [tt]type=[/tt] and [tt]id=[/tt], so long as the parameters match the expected order. You can remove [tt]type=[/tt] from the third component, and [tt]id=[/tt] from the fourth component. So [tt]site:downloads:type=cat:id=10[/tt] will shorten to [tt]site:downloads:cat:10[/tt].

If you do not want to hard-code what zone to use, you may specify either '_SEARCH' or '_SELF' as the zone name in the page-link. '_SEARCH' will cause ocPortal to dynamically find the module involved, whilst '_SELF' will use the same zone as the page-link is dynamically being interpreted in (e.g. If if it used on a menu in the site zone, '_SELF' will be equivalent to 'site').

[title="3"]Panels and blocks[/title]

Panel pages rest around your main page, if they exist. Panel pages are nothing more than pages given special names in the same zone as the pages that they surround. The special names are:
 - panel_left
 - panel_right
 - panel_top
 - panel_bottom
The [tt]GLOBAL_HTML_WRAP.tpl[/tt] template defines how these panels fit together along with the main page. Templates are described in the next section.

If '[tt]&keep_wide=1[/tt]'/'[tt]&wide=1[/tt]' is attached to the URL, the target page for any links will  not use any left/right panels. If '[tt]&keep_wide_high=1[/tt]'/'[tt]&wide_high=1[/tt]' is attached to the URL, the target page for any links will not use any left/right/top/bottom panels, and won't use the standard visual header or footer.

Panel pages (by default) are Comcode pages that arrange blocks, some of which may be used to display menus. Blocks are described in the 'Custom pages of information (via Comcode pages)' tutorial, and are essentially dynamic sections of code (such as link menus, a login box, a search box, etc) that are pinpointed onto a Comcode page. Blocks may be inserted onto a Comcode page, and also into templates.

[title="4"]The Zone Editor[/title]

[media width="150" description="The Zone Editor" float="right"]data_custom/images/docs/structure_zone_editor.png[/media]
{!zones:DOC_ZONE_EDITOR}

[title="3"]Templates[/title]

[media width="150" description="This is a detailed annotated diagram that explains basic ocPortal template structure" float="left"]data_custom/images/docs/structure_templates.png[/media]
So far we have established that the website consists of zones, that contain pages (which may be of various types); and that some pages are panels, surrounding other pages, and that panels usually are made of blocks. This together, defines one view of the structure of an ocPortal-driven website.
This might seem bewildering, but after you get used to it, it will make perfect sense.

Another view of the structure of an ocPortal-driven website is that of the composition of templates. Templates are sections of HTML that are used (basically) to structure the visual output of your site. Blocks, modules and the ocPortal layout system that binds menus, use templates directly, to structure the data they wish to output; for example, the login block needs to give the username of the currently logged in user: this, along with a lot of other data, is passed into various templates. Templates are attached together, such that one template may follow on from another, or actually be embedded in one another. Comcode pages also use templates in a sense, but ocPortal itself decides what templates to use to display the Comcode involved. And, ocPortal uses templates throughout its own internal code, for countless situations, such as displaying an error message, or generating a screen title.

As mentioned previously, the two common ways templates are joined are:
1) attaching/appending one to another: this is called attaching
2) embedding one (or various, attached together) into another: this is called wrapping
Both are used: although if we wished, we could have avoided embedded, having a combination of both techniques produces the most attractive solution. A good example of a 'wrapping' template is [tt]GLOBAL_HTML_WRAP.tpl[/tt]; it embeds the full menu and central pages, along with the common header/footer, in a certain way, to make them lay out appropriately. A good example of a template designed to be attached is the situation where one templates is repeated many times: a template that shows a single item in list of things is likely to be used like this.

A simplified view of the part of the ocPortal template tree that is common across all pages is:
[tt]
   GLOBAL_HTML_WRAP
      PANEL_TOP (optional)
         ...
      PANEL_LEFT (optional)
         ...
      (main page)
         SCREEN_TITLE
         (main pages wrapping template, and a lot more)
      PANEL_RIGHT (optional)
         ...
      PANEL_BOTTOM (optional)
         ...
[/tt]
When something appears beneath, on the same level, it has been attached. When one of more things appear beneath, on one level deeper, they have been wrapped. As a tree structure, it is built up from the most deep parts of the tree, and wrapped/attached all the way back until the final composition exists: and then it is output.

[title="4"]HTML[/title]

A third view of the structure of an ocPortal-driven website, is that of the HTML itself. HTML forms its own tree structure, which is actually similar to how the final ocPortal template tree looks before it is output.

[title="2]The Sitemap and overall website structure[/title]

The Sitemap binds all the different screens within an ocPortal site together into a single tree structure. ocPortal never saves the Sitemap -- it generates it dynamically by pulling together the various parts of the ocPortal system in a pre-determined way.

ocPortal uses the Sitemap:
 - to generate the drop-down menus: the main website one (by default) and the one used in the Admin and CMS zones
 - to generate the Sitemap shown to users on the sitemap page
 - to generate some content selection lists
 - to generate the XML Sitemap provided to search engines
 - to display the structure to you in the Sitemap editor and Permission Tree Editor

The Sitemap generally reflects the actual structure of your website, and works roughly on these levels:
[tt]
(Root)
	Zone
		Page group
			Page
				Entry-point
					Category
						...
							Entry
[/tt]

Zones are the first level and operate as different top-level security contexts, and potentially have different panels, a different theme, and different navigations.

Page groups are hard-coded with what we consider a sensible way to organisation for the different pages on the site. We do expect advanced users will not use the Sitemap directly in menus, so the hard-coding should not be a problem, just a tidy structure to start from. When you want to take full control of menus you can choose to copy the defaults into a new stored menu, and start manipulating it.

ocPortal supports 'redirects' which let you have pages within multiple zones. This will reflect on the Sitemap.

[title="3"]Sitemap philosophy[/title]

As a module-based CMS, the Sitemap isn't fully configurable, but rather mirrors the structure of your website's functionality. A module-based CMS has a number of advantages, particularly that it is able to organise a lot of rich functionality for you automatically, without forcing you to create a complex structure that is hard to understand or manage.

The disadvantage of a module-based CMS is that it does impose a structure on you that may not match what you ideally want. This is why you can:
1) choose to define your website navigation and breadcrumbs separately from the Sitemap, including in parts of the Sitemap into your own structure as required
2) use virtualisation features to make content appear in places other than the primary Sitemap position (transparent redirects, and virtual roots)

You therefore get the benefits of rich, automatically-organised, functionality -- with the benefits of full structural control in the cases where you need it.

[title="3"]Other kinds of website structure[/title]

Not everything in ocPortal comes from the Sitemap, although in most cases the data used to generate the Sitemap is also used for generating these alternate kinds of website structure.

It is a good idea to have some awareness of the different kinds of structure ocPortal will make use of.

[title="4"]Breadcrumbs[/title]

The Sitemap system is not actually used for breadcrumbs, but the data is sourced from the same places in most cases. It may vary due to:
 - breadcrumb customisations
 - added process depth (for example, when running a wizard, the breadcrumbs may reflect your depth within that wizard)

We don't use the Sitemap for the breadcrumb generation because it is generated by going backwards, rather than branching forward.

[title="4"]URLs[/title]

URLs are not primarily discussed in this tutorial, but they do form another kind of website structure.

URLs to most content are customisable, so while it does tend to reflect the zone and page the content is in, it may be altered.

There are a number of different schemes for generating URL structures.

[title="4"]The Repository[/title]

The Repository is not primarily discussed in this tutorial, but does have its own structure. The repository is a directory/file view of an ocPortal website. It is a kind of mix of the Sitemap structure, and a Unix directory structure.

[title="4"]Disk structure, and the database[/title]

There is also the structure of your files on disk. The structure of the pages is described under "Pages" above, and the structure of the other ocPortal files is outside the scope of this tutorial. There is no on-disk representation for most ocPortal content, as it is stored in the database, using a relational database schema (the actual tree structure is generated out from this flat database structure).

[title="3]The Sitemap editor[/title]

{!zones:DOC_SITEMAP_EDITOR}

[title="2"]Navigation mechanism overview[/title]

ocPortal includes a rich collection of navigation mechanisms to help you and your visitors quickly move around your website.
The main forms of navigation are:
 - Menus; these are the main menus that are either controlled by the menu editor or automatically generated from the sitemap
 - Links; links are placed all over the system to allow navigation between areas and often provide far more detailed navigation than menus could provide (for example, clicking on a username hyperlink would normally take to that you to that member's member profile)
 - Control actions; many 'view' style pages provide 'Control Actions' boxes that include links associated with the management of the entry or category you are viewing -- for example, the screen for viewing a download would include a link to edit it in the control actions box
 - Do-next menus; these are the menus in the Admin and CMS zones that provide icons, shown if you don't go direct to somewhere via digging through multiple-levels of the drop-down menu, or after performing an action
 - The breadcrumbs; these are the links that allow you to navigate backwards along modules or site sections that support tree structures -- for example, if you were deep within the download system then breadcrumbs would be displayed allowing you to quickly go back to any of the categories underneath the category you are currently at, all the way back to the root category
 - Footer buttons and links; various buttons and links are placed into the footer, via the code in the [tt]GLOBAL_HTML_WRAP[/tt] template

[title="3"]Breadcrumbs[/title]

There is a breadcrumb override facility in the Admin Zone that allows you to change how breadcrumbs work. It allows you to substitute in new chains, with powerful wildcard matching (PHP regular expressions). It is very useful if, for example, you want to show a gallery as existing underneath a download category. It is, however, advanced functionality and requires a rudimentary understanding of XML and a strong understanding of ocPortal page-links.

[concepts
 1_key="Page-link"      1_value="A special syntax that is like 'an ocPortal URL' that is written in a simplified form, local, and not tied to PHP/ocPortal URL reality (so if ocPortal URLs start to look different, Page-links still work)"
 2_key="Short URL"      2_value="A URL that points to content in a simpler, shorter, form. Also called a Quick URL' or an 'SEO URL'"
 3_key="Zone"           3_value="A sub-directory of ocPortal that stores pages and has separate configuration (including permissions)"
 4_key="Page"           4_value="An ocPortal site consists of pages, and some pages (mainly modules) consist of multiple screens"
 5_key="screen"         5_value="An actual screen that could be roughly categorised distinctly from all other screens (e.g. the backup system has a screen to start a backup, and a screen to view the results)"
 6_key="Module"         6_value="An ocPortal page that is written in PHP to a very strict structure"
 7_key="Mini-module"    7_value="A module that is easier to write, but less powerful (it has no installation support, for example)"
 8_key="Zone editor"    8_value="A unified zone and panel editor"
 9_key="Sitemap editor" 9_value="A frontend for viewing and manipulating all content on the website"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_menus"]Customising what's on the menus[/page]
 - [page="_SEARCH:tut_comcode"]Comcode and the attachment system[/page]
 - [page="_SEARCH:tut_adv_comcode"]Advanced Comcode[/page]
 - [page="_SEARCH:tut_comcode_pages"]Custom pages of information (via Comcode)[/page]
 - [page="_SEARCH:tut_adv_comcode_pages"]Advanced custom pages of information[/page]
 - [page="_SEARCH:tut_repository"]The ocPortal repository[/page]
