[title sub="Written by Chris Graham, ocProducts"]ocPortal Tutorial: Tempcode programming[/title]

Tempcode is ocPortal's template programming language. On the simplest level, it provides a substitution mechanism so that parameters and global symbols (like the current user's username, or the time) can be inserted into a template. It also serves as a complete programming language with a powerful set of control mechanisms.

[contents]decimal,lower-alpha[/contents]

[title="2"]Philosophy[/title]

Most templating languages will try to either:
 - use XML, to add programming constructs into the mark-up itself
 - allow PHP code, or an abstraction of PHP code, to run within the templates

Our approach is distinctly different, as we uphold four strong principles:
 - templates should be editable in an HTML editor without Tempcode being broken (although the HTML editor at this time must be able to support 'fragments of HTML')
 - templates should not contain code on the same level as PHP, for security reasons (a theme should not be able to delete files, for instance)
 - there should be a very clear separation of role between templates and code; code should not be put into templates simply because it is convenient, as this muddies the architecture, causing maintenance issues
 - templates should not 'execute': Tempcode should act as a filter/token-placer for output, reshaping output, rather than intertwining code with it. This is again, an architectural issue

Due to our design principles, Tempcode is a very unusual language, with a very simple syntax.

[title="3"]Advanced philosophy (experts only)[/title]

For those interested in 'programming language semantics', Tempcode is neither a functional or imperative language, but has aspects of both. A functional language essentially is focused on output being controlled by a complex mathematical expression. An imperative language essentially is focused on output being controlled by a sequence of commands. With Tempcode, output is focused on the stream of text coming from a template, and the composition of these streams; 'symbols' and 'directives' can control, manipulate and add to the stream, but they are more like embedded functional-language function-chains and control-tags than imperative code. Sequences of commands can be simulated by placing symbols and directives next to each other in the output stream and using variable manipulation features to bridge data across the portions of the output stream.

Popular template languages such as 'Velocity' or 'Smarty' are able (and often used) to function in a similar sense to this, but their language design is imperative at core, and the result simply is just far less elegant. Tempcode just 'feels right', with its clean syntax and PHP-separation, whilst other languages look literally like conventional programming code has been added inside the template in an ad-hoc way (even if the full programming syntax has been simplified a bit).

[title="2"]Syntax[/title]

Tempcode provides four constructs other than the plain text of the template itself:
 - [b]Parameters[/b]: [tt]{PARAMETER}[/tt] where PARAMETER is a code-name of something that was actually passed to the template
 - [b]Language strings[/b]: [tt]{!STRING,<parameters>...}[/tt] where STRING is a real language string from a loaded language file (e.g. Banner code could use strings from banners.ini, but most other code could not; global.ini contains strings usable anywhere)
 - [b]Symbols[/b]: [tt]{$SYMBOL,<parameters>...}[/tt] where SYMBOL is a real symbol ocPortal supports. Embedding a symbol is like making a function call or running a command in the complex place, or a substitution in the simple case
 - [b]Directives[/b]: [tt]{+START,DIRECTIVE,<parameters>...}...{+END,DIRECTIVE}[/tt] where DIRECTIVE is a real directive ocPortal supports. Directives essentially wrap portions of the template, controlling that portion; they are generally used for types of condition checking (e.g. IF) or loop. There are also directives like [tt]{+IMPLODE,<parameters>...}[/tt] that do not wrap, but work outside the normal "string manipulation" bounds that symbols do

Any Tempcode construct may be escaped (made to fit in an encoding scheme, such as HTML or  URLs, such that special text characters do not interact with that encoding scheme in an insecure/corrupting way) by escaping filters with ease, just by placing the symbol associated with the mode of escaping before the closing '}'. The following escaping filters are provided:
[list="x"]
[*][tt]*[/tt] HTML   (or [tt]=[/tt] if you are 100% sure you want the data escaping, even if it comes from something that might already be in HTML)
	(e.g. [tt]Hello & Goodbye[/tt]  [html]&rarr;[/html]  [tt]Hello &amp; Goodbye[/tt])
[*][tt];[/tt] Between single quotes
	(e.g. [tt]Who's here[/tt]  [html]&rarr;[/html]  [tt]Who\'s here[/tt])
[*][tt]#[/tt] Between double quotes
	(e.g. [tt]She said, 'Hello'[/tt]  [html]&rarr;[/html]  [tt]She said, \'Hello\'[/tt])
[*][tt]~[/tt] Where new lines are not allowed
	(text is drawn up to reside on a single line)
[*][tt]@[/tt] Comcode
	(e.g. [tt]Use the \[url] tag[/tt]  [html]&rarr;[/html]  [tt]Use the \\\[url] tag[/tt])
[*][tt]'[/tt] CSS
	(anything that isn't a part of a very constrained non-string value is stripped)
[*][tt]/[/tt] Special Javascript SGML-issue
	(e.g. [tt]print('</p>');[/tt]  [html]&rarr;[/html]  [tt]print('<\/p')[/tt])
[*][tt]^[/tt] Where new lines become '\n'
	(multiple lines drawn together with [tt]\n[/tt] as a separator)
[*][tt]&[/tt] URL parameters   (or [tt].[/tt] if you don't want extra ocPortal URL escaping to happen)
	(e.g. [tt]a&b[/tt]  [html]&rarr;[/html]  [tt]a%26b[/tt])
[*][tt]|[/tt] Javascript IDs
	(e.g. [tt]This is a -terrible- ID[/tt]  [html]&rarr;[/html]  [tt]This__is__a____terrible____ID[/tt])
[*][tt]%[/tt] Strict codenames
	(e.g. [tt]ThiS[/tt] [html]&rarr;[/html] [tt]ThiS[/tt]   [i]but[/i]  [tt]This is[/tt]  --> \[\[hack attack]] triggered)
[/list]
You can also use [tt]?[/tt] to indicate that a symbol should not be pre-processed, which is very occasionally useful if you want to stop something like a block being preloaded if it is buried under a Tempcode IF directive and hence doesn't always run. Stopping pre-processing will stop any Javascript or [abbr="Cascading Style Sheets"]CSS[/abbr] dependencies being called up, however.

It is absolutely crucial that Tempcode programmers use the proper escaping. Without it, all kinds of insecurities and unreliabilities can develop. About 50% of parameters in the default ocPortal templates actually use HTML escaping so that plain text placed inside a template does not interfere with the HTML structure itself and displays literally.

[title="2"]The Tempcode tree[/title]

Templates are composed together into a tree structure, and then the tree structure is output. This is discussed in further detail in the 'site structure' tutorial.

[title="2"]Placing theme images[/title]

To insert an image into your template, use ocPortal's image parameter: [tt]{$IMG,codename}[/tt]. Replace [tt]codename[/tt] with the image code for the image you want to use. This will turn into the image's URL. Be aware that this does not insert any HTML for you, so to use it fully:
[code]<img src="{$IMG,page/delete}" alt="Delete This" title="Delete This" />[/code]
This would insert the image [tt]http://www.mywebsite.com/themes/default/images/page/EN/delete.png[/tt] into your page.
[staff_note][html]<img src="[/html]{$IMG,page/delete}[html]" alt="Delete This" title="Delete This" />[/html][/staff_note]

The advantage to using the ocPortal code instead of hand coding the image is two-fold. First, you'll notice that it is able to automatically detect the theme and language that is currently in use (in this case, the default theme and English). Secondly, if you ever move the image, you don't have to edit every page that ever used it to point to the new location. You can edit images from within the themes management screen (go to the "Styles" section of the Admin Zone, then the "Themes" icon).

[title="2"]Numbers and logic[/title]

Tempcode is an entirely string based language. It does, however, provide significant logic and number functionality, which is made possible by conversion from text as symbols require. Numbers are read directly, and should not contain any special formatting other than the British English decimal point (.) symbol. 'True' is encoded as '1' and 'False' is encoded as '0'.

[title="2"]Symbols[/title]

[title="3"]Notes[/title]

If a symbol is missing important parameters, it generally is skipped.

Some of the more advanced symbols are not fully laid-out, but they are all defined in [tt]sources/symbols.php[/tt] in an obvious way, so advanced users can read this file.

You are very unlikely to ever want to use rows in red, as they are intended for use by core ocPortal code.

Tempcode does not have explicit data-types, everything is text. However we may interpret the text in symbols as follows:
 - Tempcode number: the text is assumed to be a number written as a normal decimal string (e.g. 12345)
 - Tempcode boolean: the text is assumed to be 0 (meaning false) or 1 (meaning true)

[title="3"]General[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>(blank)</td>
		<td>Place a comment. E.g.... [/html][tt]{$,this is a comment}[/tt][html]</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$RAND}</td>
		<td>A random number between 0 and 32000</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SET_RAND,a,b,c}</td>
		<td>A random choice from the given parameters</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CYCLE,cyclename,a,b,c}</td>
		<td>Cycle through parameters in a sequence (intended for use across template calls to create, for example, striping effects). The first parameter is the name of the cycle, and the following parameters are the parameters of the cycle. The pointer for the named cycle will move forward/around each time the cycle symbol is referenced (e.g. [/html][tt]{$CYCLE,mycycle,a,b,c,d}[/tt][html] would produce "a" the first time it's called, "b" the next, "c" next, then "d", then back to "a" again). If you only provide one parameter then the cycles current index is returned. If only two parameters are provided then the second parameter is split up by commas; this is useful for programming cycles on a higher level (e.g. for making chequered patterns using floats).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$RESET_CYCLE,cyclename}</td>
		<td>Reset a named cycle sequence.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MAILTO}</td>
		<td>Get an obfuscated "mailto: " string (obfuscated to make it hard for e-mail scavengers to detect)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HONEYPOT_LINK}</td>
		<td>If a Project Honeypot script is installed, this will insert a link to it, using a different method for different page names to increase the likeliness of a bot snag.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$INSERT_SPAMMER_BLACKHOLE}</td>
		<td>If spammer blackholes are enabled, this inserts a field into a form to create the blackhole. Blackholes allow automatic detection and banning of would-be spammers.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CSS_DIMENSION_REDUCE,30px,2}</td>
		<td>Reduce a CSS dimension by a certain number of px. If the input is not in px, no function is performed and the output stays as the input.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BETA_CSS_PROPERTY,&lt;css rule&gt;}</td>
		<td>Adds browser vendor prefixes to a CSS rule that is not widely supported yet. This effectively marks the CSS rule out, and theoretically allows new ocPortal versions to alter how that rule is handled without direct changes to your theme CSS.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$REQUIRE_JAVASCRIPT,javascript_example}</td>
		<td>Include a Javascript file in the output stream</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FACILITATE_AJAX_BLOCK_CALL,block code,differing parameters}</td>
		<td>This symbol generates a string parameter suitable for the ocPortal Javascript <kbd>call_block</kbd> function, which is used to make an AJAX call to load up a block and overwrite the contents of a specific div with it. Calling this symbol has the side-effects of triggering an include of ocPortal's AJAX code, and setting up a permission so that the server-side AJAX handler knows that the current session is authorised to load up this pattern of block. The symbol is best used by example -- see how it is currently used by code.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$REQUIRE_CSS,css_example}</td>
		<td>Include a CSS file in the output stream</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$URLISE_LANG,string,http://example.com/,This is a tooltip,1}</td>
		<td>Wrap a URL into a specially encoded string (usually this is a reference to a language string). The last parameter is '1' if the link should go to a new window.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$SPECIAL_CLICK_TO_EDIT}</td>
		<td>Get a message, appropriate to the user's web browser, saying how to do the 'magic keypress' (the Javascript detected keypress ocPortal uses to perform special functions like calling up the theme image editor)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$ANCHOR,anchorname}</td>
		<td>Place a named HTML anchor (intended for use from in Comcode)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$CSS_TEMPCODE}</td>
		<td>Get the Tempcode for all the CSS includes for this page</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PAGE_TITLE}</td>
		<td>Get the currently set page title/td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SET_TITLE,xxx}</td>
		<td>Set the current page title (affects things like the <kbd>&lt;title&rt;</kbd></td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$EXTRA_HEAD}</td>
		<td>Get the contents of this global Tempcode variable (used by some parts of the system to inject extra markup)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$EXTRA_FOOT}</td>
		<td>Get the contents of this global Tempcode variable (used by some parts of the system to inject extra markup)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$JS_TEMPCODE}</td>
		<td>Get the Tempcode for all the JS includes for this page</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Format conversion and obfuscation[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$ESCAPE,what_to_escape,optional_escaping_type}</td>
		<td>Perform escaping on the first parameter. Uses the same escaping as integrated template escaping, except a numeric constant (defined in the second parameter) is used to determine the escaping, rather than special characters (see sources/tempcode.php for a list of all the constants). Defaults to HTML escaping.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$OBFUSCATE,to_obfuscate}</td>
		<td>Obfuscate a string to make it harder for e-mail scavengers</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FIX_ID,something to make an ID}</td>
		<td>Perform escaping similar to ID escaping (convert an arbitrary string into something that can be used as an XML ID (e.g. "*" becomes "_star_").</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$STRIP_TAGS,&lt;strong&gt;example&lt;/strong&gt;}</td>
		<td>Remove HTML from some text</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$ENTITY_DECODE,this &amp;amp; that}</td>
		<td>Decode XML or HTML entities, so that written-out XML turns into actual parsed XML</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TRUNCATE_LEFT,something long,5,1,0,0,0.2}</td>
		<td>Truncate a string, keeping what's on the left as priority. First parameter is the text to truncate. Second parameter is the truncation length. Optional third parameter is a binary value for whether to show a tooltip. Optional fourth parameter is a binary value for whether the input text is already in HTML format (output text is always in HTML format). Optional fifth parameter is a binary value for whether the length desired should be based on readable characters rather than XHTML characters. Optional sixth parameter is a decimal fraction (e.g. 0.2) that represents the tolerance that can be used to preserve grammar (paragraphs and sentence).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TRUNCATE_RIGHT,something long,5,1,0,0,0.2}</td>
		<td>As above, truncating to keep what's on the right as priority.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TRUNCATE_SPREAD,something long,5,1,0,0,0.2}</td>
		<td>As above, truncating to keep an equal left/right portion.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TRUNCATE_EXPAND,something long,5,1,0,0,0.2}</td>
		<td>As above, with any truncated text going underneath an expander.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$ALTERNATOR_TRUNCATED,something long,5,if truncated,if not truncated,1}</td>
		<td>A complex symbol to allow alternation between situations when something would and would not become truncated.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PARAGRAPH,something}</td>
		<td>Add a paragraph around the contents, but only if it does not already contain any block-level elements. This is needed to combine valid (X)HTML for arbitrary Comcode insertion with the desire to have neat semantics and automatic margining.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$CLEAN_FILE_SIZE,10000}</td>
		<td>Convert a number of bytes into a nice clean human readable file size.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$TRIM, abc }</td>
		<td>Trim any textual or XHTML white-space from the given string.</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Users, Members, and Usergroups[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$USER}</td>
		<td>The Member-ID of the current user</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IS_GUEST}</td>
		<td>Whether the current user is a Guest</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$USERNAME,2}</td>
		<td>The username of the current user / given user (optionally takes a member ID, otherwise assumes the current user)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$AVATAR,2}</td>
		<td>The member's avatar (optionally takes a member ID, else assumes current user)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MEMBER_EMAIL,2}</td>
		<td>The member's email address (optionally takes a member ID, else assumes current user)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PHOTO,2}</td>
		<td>The member's photo (optionally takes a member ID, else assumes current user)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MEMBER_PROFILE_LINK,2}</td>
		<td>The member's profile link (optionally takes a member ID, else assumes current user)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$OCF_MEMBER_HTML,2}</td>
		<td>The member's information box (optionally takes a member ID, else assumes current user)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$OCF_RANK_IMAGE,2}</td>
		<td>The member's rank images in composed HTML format (optionally takes a member ID, else assumes current user)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IS_IN_GROUP,1-3}</td>
		<td>Find whether the current member is in a usergroup (parameters together constitute an [concept]ocFilter[/concept] list, except if the last is primary or secondary then this specifies that the check be limited to checking such usergroup membership).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CPF_VALUE,Some Custom Field}</td>
		<td>Find the value of a custom profile field (pass in the ID number of a custom profile field, which can be found from the URL of where you to edit it -- or pass in the human-readable name of the field; if you pass a name it can also interpret translated/Comcode text fields properly). If you pass a second parameter, it will specify the member ID to use (if not passed, it will default to the current member).</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Date and time[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$DATE_AND_TIME}</td>
		<td>The formatted data and time (may take optional parameters, not discussed here)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$DATE}</td>
		<td>The formatted date (may take optional parameters, not discussed here)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TIME}</td>
		<td>The formatted time (may take optional parameters, not discussed here)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SECONDS_PERIOD,12345}</td>
		<td>Show the number of hours/minutes/seconds in a given period of seconds</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FROM_TIMESTAMP,%d %B %Y,123456780}</td>
		<td>Converts a time-stamp to a formatted date/time (optional first parameter is a strftime-style date/time formatting string, optional second parameter is a timestamp). If no parameters given it will simply return the current timestamp.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TO_TIMESTAMP,April 1st 2009}</td>
		<td>Converts a formatted date/time to a timestamp via auto-recognition (first parameter is a timestamp). If no parameters given it will simply return the current timestamp.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MAKE_RELATIVE_DATE,123456789}</td>
		<td>Converts a timestamp into a textually described relative time (e.g. "10 minutes" [ago]).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TIME_PERIOD,1234}</td>
		<td>Converts a number of seconds into a textually described time period (e.g. "10 minutes").</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Catalogues[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CATALOGUE_ENTRY_BACKREFS,123}</td>
		<td>Get a comma-separated list of IDs of catalogue entries that reference the given catalogue entry. A second parameter may be given, which is a limit on how many to return. A third parameter may be set as the name of a content type if the backrefs should be resolved to linked content entries (for the case where the linkage is via custom fields rather than a pure catalogue). A fourth parameter of the rating type code may be given if sort-by-rating is needed (highest rated first).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CATALOGUE_ENTRY_FIELD_VALUE,123,0}</td>
		<td>Get the value of a field in a specific catalogue entry (example would be 1st field in entry #123).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CATALOGUE_ENTRY_FIELD_VALUE_PLAIN,123,0}</td>
		<td>As per <kbd>CATALOGUE_ENTRY_FIELD_VALUE</kbd>, but without any display processing on the value.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CATALOGUE_ENTRY_FOR,download,3}</td>
		<td>Get the ID of the auto-maintained catalogue entry bound to the given content entry, i.e. where the content entries custom fields are stored. This can then be used with the <kbd>CATALOGUE_ENTRY_FIELD_VALUE</kbd> symbol (above) or the <kbd>CATALOGUE_ENTRY_ALL_FIELD_VALUES</kbd> symbol (below).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CATALOGUE_ENTRY_ALL_FIELD_VALUES,123}</td>
		<td>Show a field-map view of all fields in the entry. You can also pass in a second param with the value '1' if you want raw field rows, rather than a table (useful for adding field-map data into an existing table).</td>
	</tr>
</tbody></table>
[/html]

[title="3"]eCommerce[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CURRENCY,123,USD}</td>
		<td>Do a currency conversion / Get the currency (first parameter is a number for the amount in the site's default currency, second parameter is the required currency)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CURRENCY_SYMBOL}</td>
		<td>Get the nice currency symbol for the site's default currency</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Environmental querying[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$_GET,page}</td>
		<td>Extract the requested script GET parameter</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$QUERY_STRING}</td>
		<td>Extract all requested script parameters (the 'query string', i.e. part of the URL after "?")</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$_POST,title}</td>
		<td>Extract the requested script POST parameter</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$ZONE}</td>
		<td>The zone the user is in</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PAGE}</td>
		<td>The page the user is in</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CANONICAL_URL}</td>
		<td>Get the canonical URL (for search engines)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SELF_URL,0,0,0,a=b}</td>
		<td>Get URL to current screen. You don't need to give any parameters, but if you do: the first is whether to go to the website home page if you are at where you're at due to a form post, the second is whether to included posted parameters as parameters in the URL, the first is whether to avoid the short URL facility, and further parameters are additional URL parameters.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$META_DATA,created}</td>
		<td>Fetch a defined dublin core meta data property (by code name), relating to the current content</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$REFRESH}</td>
		<td>HTML code for a site refresh, if one is in progress</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FEEDS}</td>
		<td>HTML code for RSS/Atom feeds</td>
	</tr>
	<tr style="background: #DDFFDD">
	  <td>{$RUNNING_SCRIPT,index}</td>
	  <td>Find whether an entry script is running</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MATCH_KEY_MATCH,_WILD:downloads:misc}</td>
		<td>Whether the given [/html][concept]match-key[/concept][html] matches the current URL</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MOBILE}</td>
		<td>Whether a Smartphone (for example) is being used. ocPortal is designed to be pretty good at detecting this, but if you need to specify additional user agent strings you can make a <kbd>text_custom/pdas.txt</kbd> file with <kbd>mobileuseragentsubstring=0|1</kbd> lines in it (e.g. <kbd>iphone=1</kbd> for iPhone to be detected as mobile, and <kbd>ipad=0</kbd> for iPad to not be detected as mobile). If you want to detect smartphones in CSS we suggest you either use this symbol (which the default theme uses) or if you prefer use <a target="_blank" title="CSS media queries (this link will open in a new window)" href="http://css-tricks.com/css-media-queries/">CSS media queries</a> inside your CSS files to create override rules</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$THEME}</td>
		<td>The user's current theme</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$JS_ON}</td>
		<td>Whether Javascript is enabled (Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LANG}</td>
		<td>The user's current language</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$BROWSER_UA}</td>
		<td>The user's browser, based on their user-agent string</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$OS}</td>
		<td>The user's OS, based on their user-agent string</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$DEV_MODE}</td>
		<td>Whether development mode is on (adds in extra errors, to pick up on coding standard violations)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$NO_SAFE_MODE}</td>
		<td>Detect if PHP safe mode isn't on the server</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$IS_FRIEND,2,3}</td>
		<td>Detect if the second parameter/member ID (or current member if no second parameter) has befriended the first parameter/member ID.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BROWSER_MATCHES,wysiwyg}</td>
		<td>Find whether the current browser matches a named property / has a feature. Possible properties: wysiwyg, windows, mac, linux, mobile, opera, ie, ie8, ie8+, ie9, ie9+, gecko, konqueror, safari (covers Google Chrome also), ios, android, bot</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$USER_AGENT}</td>
		<td>The user-agent string of the current user</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TIMEZONE}</td>
		<td>The server timezone</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HTTP_STATUS_CODE}</td>
		<td>Find the HTTP status code (e.g. 404) for the current request, usually 200</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BROWSER,wysiwyg,You have WYSIWYG,You do not have WYSIWYG}</td>
		<td>Conditionally chooses between two input strings, based on a browser property (see above for a list of properties). First parameter is the property, second and third are the conditional strings.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$GEOLOCATE,12.45.67.89}</td>
		<td>Find the/a user's ISO country-code (optionally takes an IP address, otherwise defaults to current user's IP)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$FORCE_PREVIEWS}</td>
		<td>Find whether the user has forced previews to show</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$PREVIEW_URL}</td>
		<td>Find the URL to perform a preview for the form on the current screen</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$CURRENTLY_INVISIBLE}</td>
		<td>Whether the current user is set to be invisible</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$CAN_SPELLCHECK}</td>
		<td>Whether spellchecking is possible</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$PREVIEW_VALIDATION}</td>
		<td>Whether validation is done upon previewing, by default</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$SESSION}</td>
		<td>Get the session ID for the current member</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$VERSION_NUMBER}</td>
		<td>Get the ocPortal version number</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CHARSET}</td>
		<td>Get the character set</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HEADER_TEXT}</td>
		<td>Get the header text (put in the page title)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SHOW_HEADER}</td>
		<td>Whether the header will be shown</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SHOW_FOOTER}</td>
		<td>Whether the footer will be shown</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$WIDE}</td>
		<td>Whether the side panels will be shown</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$WIDE_HIGH}</td>
		<td>Whether the side panels, header, and footer, will be shown</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LOGO_URL}</td>
		<td>The logo URL for the current zone</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$HAS_SU}</td>
		<td>Whether the current user is allowed to use the Switch User feature</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$STAFF_ACTIONS}</td>
		<td>A drop-down of contextual actions for the current screen</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HELPER_PANEL_TUTORIAL}</td>
		<td>The helper panel's tutorial</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HELPER_PANEL_PIC}</td>
		<td>The helper panel's picture</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HELPER_PANEL_HTML}</td>
		<td>The helper panel's HTML</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HELPER_PANEL_TEXT}</td>
		<td>The helper panel's text</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MESSAGES_TOP}</td>
		<td>Attached messages, for prominent display</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MESSAGES_BOTTOM}</td>
		<td>Attached messages, for less prominent display</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LATE_MESSAGES}</td>
		<td>Attached messages that happened after output started (after main page generation). These will usually be errors relating to the output process itself.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BREADCRUMBS}</td>
		<td>The breadcrumbs</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FORUM_CONTEXT}</td>
		<td>The ID of the forum currently within, or blank</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Placement, and general ocPortal interfacing[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FIND_SCRIPT}</td>
		<td>Find the URL to a named ocPortal entry script (e.g. 'dload')</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FIND_SCRIPT_NOHTTP}</td>
		<td>Find the URL to a named ocPortal entry script (e.g. 'dload'), but as a relative URL to domain name root</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IMG,bottom}</td>
		<td>Find a named theme image code's URL (takes the theme image code). Note that this gets the image URL, it does not write the HTML out for an image element based upon it (you need to do that yourself).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IMG_WIDTH,bottom}</td>
		<td>Find the width of the theme image/URL (particularly useful for making web pages render faster). Uses the persistent cache to remember values, if possible.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IMG_HEIGHT,bottom}</td>
		<td>Find the height of the theme image/URL (particularly useful for making web pages render faster). Uses the persistent cache to remember values, if possible.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$KEEP,0,1}</td>
		<td>Stuff to append to an ocPortal URL for 'keep parameter' passing (ocPortal passes any parameters between screens if their names start 'keep_', and this symbol enables that). The first parameter should be '1' if you need to place this directly on the front of a URL. The second parameter should '1' if you need to always attach a session ID (i.e. if you are creating a link that might be used somewhere outside the current cookie context, e.g. to feed into a download manager)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td style="background: #FFDDDD">{$KEEP_INDEX,0,1}</td>
		<td>As above, except this includes index.php as well as the parameters. It is rarely useful</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BLOCK,block=main_search,zone=site}</td>
		<td>Place a block into the template. Takes any number of parameters (but at least 1 for the block name), each of which defines a block parameter and its value. Parameters must include the block name, which is encoded against the special reserved name 'block'. For example: [/html][tt]{$BLOCK,block=main_news,filter=1\,2\,3}[/tt][html]</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LOAD_PAGE,about,site}</td>
		<td>Load a page into a template (first parameter is the page name, optional second parameter is the zone name which defaults to the current zone)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$RATING,downloads,3}</td>
		<td>Show a content type's rating. The first parameter is the content-type's code (usually the page name it's viewed from, e.g. downloads) and the second parameter is the ID for the resource.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$VIEWS,download_downloads,download_views,3}</td>
		<td>Show how many views a content type has had. The first parameter is the table to read from, the second parameter is the name of the field (it must contain 'views' -- the code will not allow arbitrary field calling for security reasons) the third parameter is the ID for the resource.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LOAD_PANEL,panel_left,site}</td>
		<td>Load a panel-page into a template (first parameter is the page name, optional second parameter is the zone name which defaults to the current zone)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PAGE_LINK,site:about}</td>
		<td>Link to a page, using [concept]page link[/concept] syntax (e.g. "_SELF:pagename:type:1")</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$ADDON_INSTALLED,galleries}</td>
		<td>Find whether an addon is installed (first parameter is the code-name of the addon)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$AWARD_ID,2}</td>
		<td>Find the content ID assigned to the given award</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$NOTIFICATIONS_ENABLED,download,3}</td>
		<td>Find whether notifications are enabled for something</td>
	</tr>
</tbody></table>
[/html]

[title="3"]ocPortal configuration querying[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SITE_NAME}</td>
		<td>The site name</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HEADER_TEXT}</td>
		<td>The header text of the current screen, taken from current zone's setting unless content is being viewed specifies it</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$ZONE_HEADER_TEXT}</td>
		<td>The header text of the current zone</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$COPYRIGHT}</td>
		<td>The site copyright</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$STAFF_ADDRESS_PURE}</td>
		<td>The staff address, without obfuscation</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$STAFF_ADDRESS}</td>
		<td>The obfuscated staff address</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$DOMAIN}</td>
		<td>The domain name of the site</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SITE_SCOPE}</td>
		<td>The site scope</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BOARD_PREFIX}</td>
		<td>The forum base URL</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BASE_URL}</td>
		<td>The base URL to the installation</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$CUSTOM_BASE_URL}</td>
		<td>The base URL to custom data in the installation (usually the same as BASE_URL)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BASE_URL_NOHTTP} / {$CUSTOM_BASE_URL_NOHTTP}</td>
		<td>The base URL to the installation, but just the path, no protocol or domain name. This is useful in JS files (which cache as strings, not Tempcode) because it doesn't cause JS security errors when HTTPS and HTTP variants of a site are both in action.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$SSW}</td>
		<td>Whether Sunday is the start of the week (Tempcode boolean)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$VALID_FILE_TYPES}</td>
		<td>Get a comma-separated list of valid file types</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$INLINE_STATS}</td>
		<td>Whether to show view/download counts inside the public visible website (Tempcode boolean)</td>
	</tr>
</tbody></table>
[/html]

[title="3"]ocPortal permission querying[/title]

Permission checks are useful if you want to show screen contents in a way that somehow reflects your configured permission scheme.
These are advanced symbols, and mirror ocPortal's internal API. The parameters are not discussed here, but you may find them from looking at the code.

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IS_STAFF,2}</td>
		<td>Is the current user / given user staff (optionally give it a member ID else works on current member, returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IS_ADMIN,2}</td>
		<td>Is the current user / given user a super admin (optionally give it a member ID else works on current member, returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_PRIVILEGE,submit_midrange_content}</td>
		<td>Member has a privilege (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_ZONE_ACCESS,adminzone}</td>
		<td>Member has access to a zone (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_PAGE_ACCESS,admin_stats,adminzone}</td>
		<td>Member has access to a page (but NOT necessarily the zone it is in) (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_ACTUAL_PAGE_ACCESS,admin_stats,adminzone}</td>
		<td>Member has access to a page and its zone (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_CATEGORY_ACCESS,downloads,3}</td>
		<td>Member has access to a category (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_ATTACHMENT_ACCESS,3}</td>
		<td>Member has access to an attachment (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_SUBMIT_PERMISSION,mid}</td>
		<td>Member has the specified kind of submit permission (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_DELETE_PERMISSION,mid}</td>
		<td>Member has the specified kind of delete permission (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$HAS_EDIT_PERMISSION,mid}</td>
		<td>Member has the specified kind of edit permission (returns Tempcode boolean)</td>
	</tr>
</tbody></table>
[/html]

[title="3"]ocPortal interfacing, specific/advanced features[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TOTAL_POINTS,3}</td>
		<td>Get the total points the specified member has</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$POINTS_USED,3}</td>
		<td>Get the total points the specified member has used (spent).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$AVAILABLE_POINTS,3}</td>
		<td>Get the total points in the specified member's account; some of these will probably have been spent already</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FLAGRANT}</td>
		<td>Place the active flagrant text</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$OCF}</td>
		<td>Whether OCF is being used (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$HAS_FORUM,General Chat}</td>
		<td>Whether a forum is available (returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$VERSION}</td>
		<td>The major version of ocPortal being used</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$USER_OVERIDE}</td>
		<td>The Member-ID of the Account being viewed (e.g. if you're staff looking in somebody else's Account then this would find the member ID, otherwise it is your own member ID</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$MANAGEMENT_NAVIGATION}</td>
		<td>The management navigation menu</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$COOKIE_PATH}</td>
		<td>Get the cookie save path</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$COOKIE_DOMAIN}</td>
		<td>Get the cookie save domain</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$IS_A_COOKIE_LOGIN}</td>
		<td>Find if a cookie login is active</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$BANNER,some_banner_type}</td>
		<td>Display a banner of specific type (first parameter is the banner type, second is an optional binary value for whether the banners should be limited to only internal banners)</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>{$ATTACHMENT_DOWNLOADS,3}</td>
		<td>Find how many downloads an attachment has had (first parameter is the ID number of an attachment)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$COMMENT_COUNT,downloads,3}</td>
		<td>Find the number of comments made for a resource (first parameter is the resource type code, second parameter is the resource ID)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$DOCUMENT_HELP}</td>
		<td>Get the URL to the help for the current screen (will be blank if there is none)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IMAGE_WIDTH,http://example.com/pic.png}</td>
		<td>Find the width of an image</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IMAGE_HEIGHT,http://example.com/pic.png}</td>
		<td>Find the height of the image</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$THUMBNAIL,http://example.com/pic.png,40x60,galleries}</td>
		<td>Generate a thumbnail URL from another image URL</td>
	</tr>
</tbody></table>
[/html]

[title="4"]Thumbnail generation[/title]

The [tt]{$THUMBNAIL}[/tt] tag is actually much more sophisticated and powerful than described above. It's full syntax is as follows...

Usage: [tt]{$THUMBNAIL,source_image,widthxheight,output_dir,filename,fallback_image,type,where,background,only_make_smaller}[/tt]
where:
 - source_image is the URL to the full image
 - widthxheight is the desired width/height for the thumbnail. For types (see below) of width or height or crop you can omit either of the width or height for automatically calculated proportionality (e.g. [tt]x20[/tt] for just a height). If you specify both for crop it crops to the exact specified box rather than to the implied proportional box.
 - output_dir is the name of a directory under ocPortal's "uploads" directory
 - filename is the name of the thumbnail filename. If not provided it will be automatically chosen based on the source_image and an articulation of the thumbnail settings
 - fallback_image is the URL to the image to use if no thumbnail could be generated. If not provided the source_image will be used
 - type is either:
  - "width" for an image which is stretched to the given width and a height in proportion to that
  - "height" for an image which is stretched to the given height and a width in proportion to that
  - "crop" for an image which has been shrunk until one of its dimensions matched that given and the rest has been chopped off
  - "pad" for an image which has been shrunk until it completely fits within the given dimensions, and then padded out
  - "pad_vert_crop_vert" for an image that may only have cropping or padding done above/below and therefore gets stretched to force that to be the case
  - "pad_horiz_crop_horiz" for an image that may only have cropping or padding done left/right and therefore gets stretched to force that to be the case
 - The "where" argument is not needed for "width" or "height" type thumbnails. For "crop" & "pad" types it is where to crop/pad:
  - "start"
  - "end"
  - "both" (assuming bottom-to-top and right-to-left)
  - If the "where" option is ommitted for cropped thumbnails then it will be centred. For padded thumbnails it will resize the image to get rid of any need for padding (ie. "padding none").
 - For "pad" types the background is used to pad the image:
  - a hex code for a specific color (with alpha)
  - or, "none" for no padding (ie. the image dimensions are not those given, but will fit inside them).
  - or, if the option is omitted for padded thumbnails then the average color of the image is used.
 - only_make_smaller can be set to "1" if the image should not be resized at all if it is already smaller than the requested thumbnail size

[title="3"]Logic[/title]

Note that all logic symbols return Tempcode boolean values (except [tt]?[/tt]). This makes them suitable for nesting with each other, or using with the 'IF' directive.
Understanding of these symbols requires an understanding of basic boolean operations but they are fairly intuitive (e.g. 'AND' will return true if all its parameters are true).

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$?,1,shows if true,shows if not true}</td>
		<td>Do an inline IF test, outputting the second parameter if the first evaluates to true and the third (optional parameter) if it does not</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$NOT,1}</td>
		<td>Boolean NOT (pass in one Tempcode boolean to get the opposite boolean out)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$OR,1,1}</td>
		<td>Boolean OR (pass in any number of Tempcode booleans to check that one is true)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$NOR,1,1}</td>
		<td>Boolean NOR (this is the same as [/html][tt]{$NOT,{$OR,...}}[/tt][html])</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$XOR,1,1}</td>
		<td>Boolean XOR (pass in two Tempcode booleans to check that just one of them is true but not both of them)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$NAND,1,1}</td>
		<td>Boolean NAND (this is the same as [/html][tt]{$NOT,{$AND,...}}[/tt][html])</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$AND,1,1}</td>
		<td>Boolean AND (pass in any number of Tempcode booleans to check they are all true)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$EQ,a,b}</td>
		<td>Test for string equality (pass in any number of strings to check they are all the same)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$NEQ,a,b}</td>
		<td>Test for string inequality (this is the same as [/html][tt]{$NOT,{$EQ,...}}[/tt])[html]</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LT,1,2}</td>
		<td>Test for numerical less-than inequality (pass in a Tempcode number)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$GT,1,2}</td>
		<td>Test for numerical greater-than inequality (pass in a Tempcode number)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IS_EMPTY,this obviously is not blank}</td>
		<td>Find whether a string is blank</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IS_NON_EMPTY,this obviously is not blank}</td>
		<td>Find whether a string is not blank</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Arithmetic[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$NEGATE,3}</td>
		<td>Negate a number</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MULT,3,3}</td>
		<td>Multiply two numbers</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$ROUND,3.2}</td>
		<td>Round a number</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MAX,3,4}</td>
		<td>Find the maximum between two numbers</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MIN,3,4}</td>
		<td>Find the minimum between two numbers</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$MOD,3}</td>
		<td>Make the given number positive (e.g. -3 becomes 3, 3 becomes 3)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$REM,10,3}</td>
		<td>Find the remainder if the first number is divided by the second</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$DIV,10,3}</td>
		<td>Divide two numbers</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SUBTRACT,4,3}</td>
		<td>Perform a subtraction</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$ADD,4,3}</td>
		<td>Add two numbers</td>
	</tr>
</tbody></table>
[/html]

[title="3"]String manipulation[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$REPLACE,exemplar,something,this is exemplar}</td>
		<td>Do a string replace (three parameters: what's being replaced, what's being replaced with, what's being replaced in)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$AT,something,3}</td>
		<td>Extract a string character (first parameter is the string, second parameter is the index of the character to get counting from 0)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$STRPOS,something,hi}</td>
		<td>Find the position of a string sub-string (first parameter is the search string, second parameter is the substring, returns Tempcode number)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$IN_STR,something,in}</td>
		<td>Find whether a sub-string is in a string (first parameter is the search string, second parameter is the substring, returns Tempcode boolean</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SUBSTR_COUNT,abacus,a}</td>
		<td>Find how many times a substring appears (first parameter is the search string, second parameter is the substring, returns Tempcode number)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SUBSTR,something,2,2}</td>
		<td>Extract a string sub-string (first parameter is the string, second parameter is the index of where to extract from, third parameter is the extraction length)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LENGTH,something}</td>
		<td>Find the length of a string (give it a string, returns a Tempcode number)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PAD_LEFT,12,4,0}</td>
		<td>Pad something out on the left. This example produces 0012</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PAD_RIGHT,12,4,0}</td>
		<td>Pad something out on the right. This example produces 1200</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$WCASE,A b C}</td>
		<td>Convert string to word case</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$LCASE,A b C}</td>
		<td>Convert string to lower case</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$UCASE,A b C}</td>
		<td>Convert string to upper case</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$WORDWRAP,blah blah blah,4,&lt;br /&gt;,1}</td>
		<td>Word-wrap a string (first parameter is the string, second parameter is the maximum line length, optional third parameter is the divider string which defaults to an HTML line-break, optional fourth parameter is a binary value specifying whether to force hard cuts)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PREG_MATCH,\d,1 2 3}</td>
		<td>See if something matches a regular expression (first parameter is the regexp, second parameter is the subject string)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$PREG_REPLACE,\d,a,1 2 3}</td>
		<td>Perform a regular expression replace (first parameter is the regexp, second parameter is the replacement string, third parameter is the subject string)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$REVERSE,a\,b\,c}</td>
		<td>Reverse a comma-separated list</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$COMMA_LIST_GET,a=1\,b=2,a}</td>
		<td>Find a value from a comma-separated list.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$COMMA_LIST_SET,a=1\,b=2,a,2}</td>
		<td>Set a value in a comma-separated list.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$NUMBER_FORMAT,1234}</td>
		<td>Make a number (integer) look nice, with commas etc (takes a Tempcode number)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$FLOAT_FORMAT,1234.5678}</td>
		<td>Make a decimal number look nice, with commas etc, to 2 decimal places (takes a Tempcode number)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$TEMPCODE,{$USER}}</td>
		<td>Evaluates the given parameter as Tempcode (takes a string). This is useful for <strong>very</strong> rare situations where you want to write in symbols as parameters to Comcode tags where the parameter is treated as a plain-string. This is only useful in Comcode, when typing Tempcode you can nest Tempcode constructs almost however you like.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$COMCODE,[b]Comcode[/b]}</td>
		<td>Evaluates the given parameter as Comcode (takes a string). This is useful in conjunction with the above (<kbd>TEMPCODE</kbd>), as anything passed into a symbol won't be evaluated as Comcode.</td>
	</tr>
</tbody></table>
[/html]

[title="3"]Tempcode variables[/title]

You can store and retrieve values in Tempcode variables. These work across templates, and also work in any-order due to the ocPortal Tempcode pre-processor (i.e. something can be [tt]SET[/tt] after the [tt]GET[/tt] for it).

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
		<th>Symbol name / example</th>
		<th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$ISSET,test}</td>
		<td>Find whether a Tempcode variable is set (give it the name of a variable, returns Tempcode boolean)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$INIT,test,1}</td>
		<td>Initialise a Tempcode variable to a value, but only if it is not yet set (give it the name of a variable, and a value, returns nothing)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$SET,test,1}</td>
		<td>Set a Tempcode variable to a value (give it the name of a variable, and a value, returns nothing). Bear in mind that the ocPortal Tempcode-preprocessor will likely cause your code to run once in every code branch before it outputs (meaning even code inside IF directives that never are true will still pre-process), and once again as it outputs. So always reinitialise your variables in your template to make sure they are not dirty from the pre-processing stage. This behaviour may seem strange, but it is necessary for performance, comprehensive caching, and reasons of ocPortal needing conditionless output foresight.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$GET,test}</td>
		<td>Get the value of a Tempcode variable (give it the name of a variable, returns the value)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$THEME_WIZARD_COLOR,#RRGGBB,name,equation}</td>
		<td>Sets a theme wizard colour that can be retrieved from <kbd>name</kbd> as a Tempcode variable. The equation is actually ignored during Tempcode evaluation but is picked up by the Theme Wizard.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$INC,test}</td>
		<td>Increment a Tempcode variable (give it the name of a variable, returns nothing)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>{$DEC,test}</td>
		<td>Decrement a Tempcode variable (give it the name of a variable, returns nothing)</td>
	</tr>
</tbody></table>
[/html]

[title="2"]Directives[/title]

[html]
<table class="results_table wide_table autosized_table" summary="Columned table"><tbody>
	<tr>
      <th>Directive name</th>
      <th>Purpose</th>
	</tr>
	<tr style="background: #DDFFDD">
		<td>BOX</td>
		<td>These allow the 'standard box' layout convention to be used without duplicating a lot of HTML in different templates. CSS could never provide this itself, as the box 'styling' actually involves a large chunk of complex structure.
	          <br />The parameters to the directive are (all may be blank or left out):<ol>
					<li>the title (blank means no title is used)</li>
					<li>the type of the table (there will be a template, STANDARDBOX_&lt;type&gt; for any valid type code; the default is 'default'). [/html][tt]default[/tt] and [tt]accordion[/tt][html] come as standard.</li>
					<li>the CSS width</li>
					<li>'|' separated list of options (meaning dependant upon templates interpretation)</li>
					<li>'|' separated list of meta information (key|value|key|value|...) (e.g. [/html][tt]Name|Allen|Gender|Male|Country|USA[/tt][html])</li>
					<li>'|' separated list of link information (linkhtml|...)  (e.g. [/html][tt]<a href="http://ocportal.com">ocPortal</a>|<a href="http://ocproducts.com">ocProducts</a>[/tt][html])</li>
					<li>the links added to the top left of the box (Defaults to false)</li>
		</ol></td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>CSS_INHERIT</td>
		<td>Include another theme's CSS into your CSS file, so you only need to specify differences. The parameters are: CSS file name, theme name, seed colour [optional]. The contents of the directive should be left blank.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>IN_ARRAY</td>
		<td>See if something is contained in an array</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>INCLUDE</td>
		<td>Include a template in another and pass parameters (this makes a template very much like a function in a conventional programming language)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>WHILE</td>
		<td>Do a loop until the Tempcode boolean used as the directive parameter evaluates to false.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>LOOP</td>
		<td>Do a loop over a list of map arrays. This is a very complex directive, and not used much in default templates. If has support for automatic columnisation and sorting. In the content, references to [tt]loop_key[/tt] and [tt]loop_var[/tt] can be used, to refer to the current iteration's key and value, respectively. If the array is multidimensional, parameters can be used with the names of the keys in the second-level array in the current iteration. You can also pass in a comma-separated list of numbers to loop over.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>IF_PASSED/IF_NON_PASSED</td>
		<td>Find if a named parameter was passed (Do <b>not</b> encase the parameter with {})</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>IF_PASSED_AND_TRUE/IF_NON_PASSED_OR_FALSE</td>
		<td>Find if a named parameter was passed and it's truth state (useful for robust optional boolean parameters that default to false)</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>IF_EMPTY/IF_NON_EMPTY</td>
		<td>Find if some Tempcode evaluates to empty. This is <b>extremely</b> useful, as it allows you to, for example, now show a table if it has no rows passed in. From a programming point of view, it allows us to avoid making new templates and improve accessibility compliance.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>IF_ARRAY_EMPTY/IF_ARRAY_NON_EMPTY</td>
		<td>Find if an array is empty.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>IF_ADJACENT/IF_NON_ADJACENT</td>
		<td>This allows templates to be context dependant. For example, if a template starts of using a &lt;li&gt; tag to make a list, but someone wants to change it to simply put '|' characters between entries, then IF_ADJACENT could be used so as to not add a '|' at the start of the first entry in the lit.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>IF</td>
		<td>This simply tests a condition. This condition is often generated by nesting symbols together. For example, [/html][tt]{+START,IF,{$EQ,{A},{B}}}...{+END}[/tt][html]</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>OF</td>
		<td>This is a non-wrapping directive that extracts a string from an array at a certain array position.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>IMPLODE</td>
		<td>This is a non-wrapping directive that turns an array into a string by placing a separator between each element.</td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>COUNT</td>
		<td>Find the number of elements in an array.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>SET</td>
		<td>Like the SET symbol, but sets with surrounded block of code rather than the second parameter.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>RECONTEXTUALISE_IDS</td>
		<td>Prefixes all the IDs contained within (prefix is given as the first parameter). Reassociates form labels correctly. This directive is useful if you need to have the same form on an HTML page more than once.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>PARAM_INFO</td>
		<td>Shows all parameters in the current scope. Very useful for debugging what goes into a template. Use without and directive contents like, <samp>{+START,PARAM_INFO}{+END}</samp></td>
	</tr>
	<tr style="background: #FFDDDD">
		<td>FRACTIONAL_EDITABLE</td>
		<td>Used to make a string of some content editable inline (usually, the title as shown in the index).</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>IF_IN_ARRAY,example,PASSED_IN_ARRAY,output if it is</td>
		<td>Output something if something is in an array. This only works with arrays passed into templates. First parameter is a string to check for, second parameter is the name of an array, third parameter is what to output.</td>
	</tr>
	<tr style="background: #DDFFDD">
		<td>IF_NOT_IN_ARRAY,example,PASSED_IN_ARRAY,output if it is not</td>
		<td>Opposite of IF_IN_ARRAY</td>
	</tr>
</tbody></table>
[/html]

[title="2"]Examples[/title]

The most important directives are:
 - IF_NON_EMPTY
 - IF_EMPTY
 - IF

[title="3"]IF_NON_EMPTY[/title]

This directive is commonly used when a box or explanation needs placing around something, unless that something happens to be blank (empty).
For example, the following is a fairly typical thing to see in a template:
[codebox]
{+START,IF_NON_EMPTY,{DOWNLOADS}}
	<p>We have the following downloads:</p>
	{DOWNLOADS}
{+END}
[/codebox]

The [tt]IF_NON_EMPTY[/tt] template evaluates [tt]{DOWNLOADS}[/tt], to see if it is blank. If it is not blank, the contents of the directive is output, otherwise nothing happens.
As you can see from this example, we need to check for emptyness so we don't show a boxed message about downloads that refers to nothingness.

[title="3"]IF_EMPTY[/title]

An alternative approach to the above example is to include a special message upon emptyness, rather than skipping over. We might do this if the content being displayed is critical and thus the emptyness must be explicitly acknowledged:
[codebox]
<p>We have the following downloads:</p>
{DOWNLOADS}
{+START,IF_EMPTY,{DOWNLOADS}}
	<p class="nothing_here">(none)</p>
{+END}
[/codebox]

Note here how we are displaying [tt]{DOWNLOADS}[/tt] even if it is empty. Obviously if it is empty, nothing would display, so we can get away with it. If we were being pedantic we might have wrote the following:
[codebox]
<p>We have the following downloads:</p>
{+START,IF_NON_EMPTY,{DOWNLOADS}}
	{DOWNLOADS}
{+END}
{+START,IF_EMPTY,{DOWNLOADS}}
	<p class="nothing_here">(none)</p>
{+END}
[/codebox]
and arguably this does better demonstrate what we're trying to do, even though the behaviour is the same (ignoring invisible differences in HTML white-space).

It's often useful to be a bit clever with the emptyness-checking directives. For example:
[codebox]
<p>We have the following downloads and images:</p>
{DOWNLOADS}
{IMAGES}
{+START,IF_EMPTY,{DOWNLOADS}{IMAGES}}
	<p class="nothing_here">(none)</p>
{+END}
[/codebox]

In this example, the directive checks if the [tt]{DOWNLOADS}{IMAGES}[/tt] is blank, which is exactly the same as checking if they are both blank (because blank next to blank is still just blank).

[title="3"]IF[/title]

The 'IF' directive allows particular complex calculations to be done. For a simple example, we can replicate the trick in the last example in a more formal way:
[codebox]
<p>We have the following downloads and images:</p>
{DOWNLOADS}
{IMAGES}
{+START,IF,{$AND,{$IS_EMPTY,{DOWNLOADS}},{$IS_EMPTY,{IMAGES}}}}
	<p class="nothing_here">(none)</p>
{+END}
[/codebox]

This checks to see if "DOWNLOADS is empty and IMAGES is empty".

Tempcode uses what is called a "prefix notation", and is similar to the way you write mathematical functions. For example, in common maths:
[code]
f(a,b)
[/code]
is how you would write "evaluate function 'f' with parameters 'a' and 'b'.
In the similar Tempcode notation you would write (assuming 'A' and 'B' are template parameters and 'F' is a real Tempcode symbol):
[code]
{$F,{A},{B}}
[/code]

Here's another 'IF' directive showing a more complex computation:
[codebox]
{+START,IF,{$LT,{ADD_DATE_RAW},{$SUBTRACT,{$FROM_TIMESTAMP},86400}}}
	<p>This content on {$SITE_NAME} is more than one day old.</p>
{+END}
[/codebox]

Background: a unix timestamp is a common measurement of time on computers- it represents the number of seconds since 1970 and because of its nature as a simple decimal number, is very useful for performing arithmetic.
This example checks to see if [tt]ADD_DATE_RAW[/tt] is less than the current unix timestamp minus 86400. 86400 is the number of seconds in a day, so in other words the example checks to see if [tt]ADD_DATE_RAW[/tt] is at least a day in the past. Because [tt]ADD_DATE_RAW[/tt] is often passed into templates that display content, it checks to see if the content is at least a day old.

I threw [tt]{$SITE_NAME}[/tt] into the example just to demonstrate symbols are not only for use in IF directives- this one is being used to perform a simple placement of the website name. All symbols do is compute results, so those results might be used for further computations as parameters to computational symbols (such as 'SUBTRACT'), or they might be passed into a directive, or they might be simply output. It merely depends on where they are placed.

Tempcode is extremely powerful, and hopefully now you can see how symbols, directives, and parameters, can come together to allow great things to happen!

[box]See [tt]tempcode_test.tpl[/tt] for more examples on how to use symbols and directives.[/box]

[title="2"]GUIDs[/title]

There is a design issue that comes to us when we design template structure... do we re-use templates so that editing is easier, load is decreased, and consistency is raised; or do we allow maximum customisation of different aspects of the system by not re-using templates?
We have tended to stick to a middle ground between these extremes, and re-used templates when the usage pattern was almost identical. For example, almost all of ocPortal uses the same form field templates, but Wiki+ posts use different templates to forum posts. However, there are still places where we re-use templates in situations that sites may wish to develop in separate directions.

The solution to this is to make use of the GUID each template usage is given when it is used.
Each 'do_template' call in ocPortal, which loads up a template, passes in a parameter, '_GUID'. The GUIDs may then be used along with tempcode directives to control what the template outputs.
The template editor has special support for the GUIDs, showing what GUIDs a template is used with and providing links to view the code associated with each GUID. It also provides a feature to automatically insert an 'IF' directive that differentiates against one of the GUIDs to provide a place to put output that will only be shown for it.

If you enter the template editor from the 'Template tree' screen then you will be told the GUID that was used by the node in the tree that you selected.

[concepts
 1_key="symbol"           1_value="A special element that may be inserted into "
 2_key="parameter"        2_value="A parameter to a template; only parameters that the code calling the template supports may be used"
 3_key="directive"        3_value="A tool used to surround an area of a template between a START and an END, to apply something to it (such as only using it conditionally)"
 4_key="Shift Encoding"   4_value="The process of identifying a portion of a template to shift into another"
 5_key="Shift Decoding"   5_value="The process of taking an identified template portion and placing it in the referencing template"
 6_key="variable"         6_value="Two uses: 1) Either of a parameter, symbol, directive or language string reference. 2) A named piece of memory used by Tempcode symbols that manipulate variables."
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_markup"]Introduction to XHTML, CSS and Javascript[/page]
 - [page="_SEARCH:tut_releasing_themes"]Releasing a theme[/page]
 - [page="_SEARCH:tut_themes"]Themeing your site[/page]
 - [page="_SEARCH:tut_structure"]ocPortal site structure[/page]
 - [page="_SEARCH:codebook"]ocPortal Code Book[/page]
