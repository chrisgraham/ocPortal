[title sub="Written by Chris Graham, ocProducts"]ocPortal Tutorial: Filtering using ocSelect syntax[/title]

ocPortal contains a filtering system for selecting content based upon defined filters. ocSelect is the language for defining filter strings, and is an advanced feature of ocPortal. It is not to be confused with ocFilter, which is the language for determining what categories to return results from.

[contents]decimal,lower-alpha[/contents]

[title="2"]An introductory example[/title]

An ocSelect filter string consists of comparisons, separated by commas. Here is an example:
[codebox]
something=value,somethingelse>value
[/codebox]
This defines two comparisons. Both must hold true for any result returned (i.e. they are ANDd).

In this example, the first is an '=' comparison, and the second is an '>' comparison. Anyone who knows very basic maths will understand what these mean.

'something' and 'somethingelse' would be database field names for the main database table of whatever content type is being filtered.

[title="2"]The full language[/title]

[box="Security note" width="25em" float="right"]For security reasons, some fields are not available to ocSelect, such as password fields[/box]The field names must match field names in the content type's main database table, or one of the following special values:
 - [tt]compound_rating[/tt] (the rating)
 - [tt]meta_keywords[/tt] (the SEO keywords / tagging)
 - [tt]meta_description[/tt] (the SEO description)
 - [tt]field_<id>[/tt] (custom fields, where [tt]<id>[/tt] is the field ID of the custom field)
You are allowed to specify that comparisons may work on multiple fields, by separating field names with pipe ([tt]|[/tt]) symbols. This is particular useful for a search filter, to make the typed string look across multiple fields.

[box="GET/POST?" width="25em" float="right"]GET/POST parameters are the technical name for how parameters are passed to web pages. The [tt]&something=value[/tt] stuff you see in URLs are GET parameters, and POST parameters are what forms pass around behind-the-scenes.[/box]We support the following comparison types:
 - [tt]<[/tt] (Less than)
 - [tt]>[/tt] (Greater than)
 - [tt]<=[/tt] (Less than or equal to)
 - [tt]>=[/tt] (Greater than or equal to)
 - [tt]=[/tt] (Equal to, where blank means skip)
 - [tt]==[/tt] (Equal to, where blank means only a blank value will be matched)
 - [tt]~=[/tt] (Contains substring)
 - [tt]~[/tt] (Seems to match, according to database full-text search matching)

The comparison value can either by given directly, like in the introductory example, or it can be written like [tt]<name>[/tt], which will tell it to look within a GET/POST parameter called [tt]filter_<name>[/tt]. This is the mechanism by which you hook up forms to the filter strings.

You can also specify that comparison types are read via GET/POST parameter in the same way, if you want users to define how each field should match.

[title="2"]Where the filters can be used[/title]

There is an ocSelect-based parameter for the following blocks:
 - [tt]main_multi_content[/tt]
 - [tt]main_gallery_embed[/tt]
 - [tt]main_cc_embed[/tt]

As well as active support within the following modules:
 - [tt]catalogues[/tt]
 - [tt]downloads[/tt]
 - [tt]galleries[/tt]
 - [tt]members[/tt]
 - [tt]news[/tt]
(the filter used will be read from any GET/POST [tt]active_filter[/tt] parameter that is set)

As explained above, ocSelect works by reading GET/POST parameters and matching them using the rules specified in the defined ocSelect filter string. In the case of the filtering for the modules, the filter string is also supplied as a GET/POST parameter.

[title="2"]Generating filters[/title]

[exp_thumb="Inspecting the block's HTML to get the auto-generated ocSelect filter string, which we'll use as a starting point" float="right"]ocselect_html[/exp_thumb][exp_thumb="An automatic news filter form" float="right"]ocselect_main_content_filtering[/exp_thumb]
The concept of writing ocSelect filter strings, and matching forms, can be a bit daunting. This is why the [tt]main_content_filtering[/tt] block exists. It will automatically construct filters and forms for content types.

You don't actually need to use this block in production at all. It is a good way to build up a default form, which you can then get HTML from as a starting point.

There are two steps in getting your HTML ready:
1) Show the block for your content type, with no parameters
2) Grab the auto-generated ocSelect filter string and customise it, then show the block using your customised filter


Once you have built a default form for a content type, inspect the HTML to get the auto-generated [tt]active_filter[/tt] value (see the image above).

In our case the auto-generated ocSelect filter string was:
[codebox]
allow_comments<allow_comments_op><allow_comments>,allow_rating<allow_rating_op><allow_rating>,allow_trackbacks<allow_trackbacks_op><allow_trackbacks>,author<author_op><author>,date_and_time<date_and_time_op><date_and_time>,edit_date<edit_date_op><edit_date>,news<news_op><news>,news_article<news_article_op><news_article>,news_views<news_views_op><news_views>,notes<notes_op><notes>,submitter<submitter_op><submitter>,title<title_op><title>,validated<validated_op><validated>,compound_rating<compound_rating_op><compound_rating>,meta_keywords<meta_keywords_op><meta_keywords>,meta_description<meta_description_op><meta_description>
[/codebox]

We will take that and modify it. In this case I think the following filter is much better:
[codebox]
author~=<author>,date_and_time><date_and_time>,news|news_article|title|meta_keywords|meta_description~=<news>,submitter=<submitter>,compound_rating>=<compound_rating>
[/codebox]

[exp_thumb="A refined filter form" float="right"]ocselect_refined_filter[/exp_thumb]We then feed into the block's "param" setting to get our refined filter form (see the image below).

[title="2"]Putting the filter form into the site[/title]

If we are happy with how our refined filter form looks, we can continue with the [tt]main_content_filtering[/tt] block.
Otherwise, we can grab the HTML that the block output and tune it. The only thing that ocPortal needs is the GET/POST fields to match what the ocSelect filter string wants, otherwise you can use whatever HTML you want.

We'll assume we'll continue to use the [tt]main_content_filtering[/tt] block for the following continuations of our news filtering example.

[title="3"]Putting into a panel[/title]

If you want to place a filter on the news page, with it shown in a panel only on the news page, you'd put something like this into your panel's Comcode:
[codebox]
{+START,IF,{$MATCH_KEY_MATCH,site:news}}[block="author~=<author>,date_and_time><date_and_time>,news|news_article|title|meta_keywords|meta_description~=<news>,submitter=<submitter>,compound_rating>=<compound_rating>" content_type="news" labels="date_and_time=Newer than,news=Containing,submitter=Submitted by,compound_rating=Minimum rating" types="date_and_time=days"]main_content_filtering[/block]{+END}
[/codebox]

[title="3"]Putting into a news template[/title]

If you wanted it on the news archive screen, you'd edit the [tt]NEWS_ARCHIVE_SCREEN[/tt] template and add:
[codebox]
{$BLOCK,block=main_content_filtering,param=author~=<author>\,date_and_time><date_and_time>\,news|news_article|title|meta_keywords|meta_description~=<news>\,submitter=<submitter>\,compound_rating>=<compound_rating>,content_type=news,labels=date_and_time=Newer than\,news=Containing\,submitter=Submitted by\,compound_rating=Minimum rating,types=date_and_time=days}
[/codebox]

[concepts
 0_key="ocSelect"  0_value="ocPortal's syntax for filtering returned content"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_fields_filter"]The form field filter system[/page]
 - [page="_SEARCH:tut_comcode"]Comcode and the attachment system[/page]
 - [page="_SEARCH:tut_adv_comcode"]Advanced Comcode[/page]
 - [page="_SEARCH:tut_adv_comcode_pages"]Advanced Custom pages of information (via comcode)[/page]
 - [page="_SEARCH:tut_filter"]Filtering using ocFilter syntax[/page]

