[title sub="Written by Chris Graham, ocProducts"]ocPortal Tutorial: Integration of ocPortal and other installed scripts/applications[/title]

This tutorial will provide details on how to integrate ocPortal with another web system (known henceforth as the 'other system') installed for your website.

Please note that many systems, especially complex ones, will not easily integrate without reprogramming. In this event, you may wish to hire ocProducts for commercial assistance.
Even the kinds of integration here usually require a high level of skill in web technologies and ocPortal technologies.

[contents]decimal,lower-alpha[/contents]

[title="2"]Linking[/title]

The simplest form of integration is by simply placing a link on your menu. There is nothing stopping you having multiple systems installed on your website as long as they do not have conflicting file/directory structures.

[title="2"]Embedding a simple HTML page[/title]

If you don't need to integrate a full web application, just a simple HTML page, this can be done without much trouble.

[title="3"]The old, more robust, way[/title]

[box="Note" width="25em" float="right"]Relative URLs are normally read relative to the path the referencing page is in. For example, if an HTML file is loaded directory, relative URLs that file references would be relative to the path of the HTML file. This behaviour can be changed using an HTML tag 'base', but ocPortal does not use this by default; you may place a 'base' into ocPortal in [tt]HTML_HEAD.tpl[/tt] if you wish, to create a common location for relative-URLs to be relative to. This is possible in ocPortal as ocPortal itself only uses absolute URLs.[/box]

The two main issues that present themselves are:
 - HTML files tend to have associated data files, and the path these are read from when integrated into ocPortal will not be the same as the path of the HTML file itself (as page files are located in a different location to where the index.php file that handles the page request is located)
 - HTML files contain surrounding mark-up that must be stripped, because ocPortal already provides it

The best way I can explain how to integrate an HTML page is by presenting a simple scenario.

In this scenario, a HTML page named mypage.html has been made in an editor, and it contains a file myimage.png that is referenced by a relative URL with no path (i.e. it is assumed to be in the same directory as the mypage.html file).

Imagine mypage.html contains...
[code="HTML"]
<html>
   <head>
      <title>This is my page</title>
   </head>
   <body>
      <img src="myimage.png" />
   </body>
</html>
[/code]

To integrate this page as [tt]site:mypage[/tt], the following steps would need to be taken:
 - Strip down the file to only contain [tt]<img src="myimage.png" />[/tt].
 - Place myimage.png in the 'site' directory (this assumes that 'short URLs' is turned off -- if it isn't, see the 'Note)
 - Rename the file to mypage.htm (HTML pages in ocPortal must end .htm, not .html or anything else)
 - Place mypage.htm in site/pages/html_custom/EN/

[title="3"]The new, quicker, way[/title]

As of version 3, ocPortal can handle most things for you.
 - Copy any .htm files into the [kbd]pages/html_custom/EN/[/kbd] directory (.html files should be renamed to .htm files)
  - [i]Unless[/i] the file is meant to be located in a subdirectory and ocPortal has a zone with the same name as that subdirectory. In this case, you'd place it in the equivalent directory of that zone
   - For example, don't upload [kbd]pages/html_custom/EN/example/test.htm[/kbd] if you have a zone named 'example. Put the file in [kbd]test/pages/html_custom/EN/[/kbd]
   - If the directories go more than one level deep, ocPortal will translate '/' to '_' when matching against a zone name (e.g. [kbd]site/more[/kbd] would be considered a zone named [kbd]site_more[/kbd])
 - Copy any non-.htm files (images, etc) into [kbd]uploads/website_specific[/kbd]
 - Your pages should then show up as normal ocPortal entry-points in the menu editor
 - Go through the pages in ocPortal to find any broken links and adjust them so that they work. ocPortal can't perfectly fix your links for you every-time, but it does do a pretty good job. Read on for more information how link rewriting works

ocPortal link alternation works by replacing simple patterns to local relative links. For example, a link "site/mypage.htm" would go to the ocPortal "site:mypage" entry point. If the mypage.htm file had been correctly copied to pages/html_custom/EN/ then ocPortal would actually load it up as intended.
A link "mypage.htm" would go to the ocPortal ":mypage" entry point.

As ocPortal can only rewrite the simple links, the process of fixing broken links is often a matter of simplifying them. For example:
 - [tt]http://mybaseurl/mypage.htm[/tt] could not be fixed by ocPortal, because it is not a local link. Change it to [tt]mypage.htm[/tt].
 - [tt]../mypage.htm[/tt] might be used from a page located in a subdirectory. Unfortunately ocPortal can't realistically recognise this, so it can't translate this link. In this case, you would need to replace the link with the proper ocPortal page link.

To clarify, the following linking situations confuse ocPortal:
 - full links to local pages
 - page trees that go more than one level deep
 - links that go back up a page tree

[title="2"]Embedding[/title]

If you wish for the other system to appear directly inside ocPortal, much like an ocPortal page, this is a lot more awkward.

[title="3"]iframe[/title]

[exp_thumb="Creating a new Comcode page to place the iframe" float="right"]integration_cc_page[/exp_thumb]
An iframe is an HTML construct that allows you to place one site inside a region ('frame') of another. There are two main drawbacks with frame based approaches however:
 - the browser back button will send the whole ocPortal site back, not the embedded site. In other words, if you have made clicks inside the embedded system, and then click 'back' in your browser, ocPortal will move back, with the likely result being the embedded section is no longer the display ocPortal page
 - sometimes web browser bugs can cause rendering problems, especially when it comes to scrollbars
 - the title-bar titles would not be reflected in the browser title-bar

To place an iframed system into ocPortal, the easiest way is to make a new Comcode page which will contain the frame, link that onto your menu, and place the following Comcode into the page:

[code]
[html]
<iframe frameBorder="0" scrolling="no" title="whatever the embedded system is" src="whatever the system URL is" style="width: 100%; height: whatever height you want px;">whatever the embedded system is</iframe>
[/html]
[/code]

Where the following are appropriately replaced:
 - whatever the embedded system is (e.g. 'Something web system')
 - whatever the system URL is (e.g. '{$BASE_URL}/somethingwebsystem/')
 - whatever height you want (e.g. '900')

If the embedded system has a non-predictable height, then under normal circumstances, an extra set of scroll-bars would be rendered around it when your pre-set height is exceeded. In order to avoid this without needing to choose an excessive default height, special code must be written that will regularly resize the iframe element placed in ocPortal so it has the same height as the actual contents of the frame -- hence eliminating the need for a vertical scrollbar. Note that if you do this, the embedded system must be on the exact same domain as ocPortal, or web browser security will prevent the height detection from working.

[code]
[html]
<script type="text/javascript">
// <![CDATA[
function resizeEmbeddedFrame()
{
   var frame=document.getElementById('frame');
   if ((frame) && (top.frames['frame'].document.body))
   {
      if (top.frames['frame'].document.body.offsetHeight+'px'!=frame.style.height)
      {
         frame.style.height=top.frames['frame'].document.body.offsetHeight+'px';
         frame.scrolling='no';
      }
   } else clearInterval(tid);
}
//]]></script>
</script>

<iframe frameBorder="0" scrolling="no" title="<whatever the embedded system is>" name="frame" id="frame" src="<whatever the system URL is>" style="width: 100%; height: 900px;"><whatever the embedded system is></iframe>

<script type="text/javascript">
<!--
	var tid=window.setInterval(function() { resizeEmbeddedFrame(); },500);
// -->
</script>
[/html]
[/code]

The draw-back on relying on this auto-resizing method is that it is somewhat computationally intensive on users' web browsers (doing a check twice a second). It is likely that users will not notice, however. When ocPortal does iframes it actually ties in a bit of code to anything that would change the frame height, to make it resize on demand, rather than routine checking -- but this is not really very easy to do if you are working with someone else's code.

[title="3"]Naturally[/title]

The most preferable method of getting the other system to display inside ocPortal is to 'port' it to ocPortal, as a properly constructed module, minimodule, block or miniblock. This would be very possible for most systems, but also a very significant programming effort.

The quickest way is to use minimodules/miniblocks. These are simplified equivalents to the normal ocPortal blocks and modules- anything echoed out is put into the output stream in the place you'd expect. They are placed in the correspondingly named directories in ocPortal's file-system, and then you can just use them as normal pages/blocks.

ocPortal is written so that it treats 'PHP notices' as fatal errors. This is a part of our quality standards. Some poorly written PHP code, however, is designed for PHP configurations that suppress these notices. To work around this we turn off a lot of our standard checking settings when minimodules or miniblocks are loaded.

[title="3"]Third-party APIs (for developers)[/title]

If you are using a third-party API with ocPortal, you can upload all the PHP files to the [tt]sources_custom[/tt] directory.

Before calling the third-party code it is advisable to call these lines of PHP code:
[code]
require_code('developer_tools');
destrictify();
[/code]

These lines will turn off a lot of ocPortal strictness, and allow include-paths to work better (many PHP files will make assumptions that they are running from inside the include-path).

To load up them use either normal PHP code, or like [tt]require_code('example');[/tt] (for [tt]sources_custom/example.php[/tt]).

[title="3"]Code-based relay[/title]

A compromise between a naturally ported system and a framed system would be to actually write an ocPortal module that loads the web pages from the other system and puts their output directly into ocPortal's output stream. ocPortal has a special API for this, in the 'integrator' source file.
There are two major problems with this approach:
 - The embedded system would always see the server's IP address instead of the clients; this could lead to security issues if it uses IP addresses as a part of its security model
 - It would be ugly (e.g. mixed visual styles), unless extra work was done to clean things up

[title="3"]RSS/Atom[/title]

If you are trying to integrate a system that is non-interactive, and outputs all important information in either the RSS or Atom families of feed formats, you may be able to perform an integration by simply using the 'main_rss' block in combination with the feed URL (or if it is date based information, overlaying the feed URL onto the calendar).
This form of integration is most appropriate for news and calendars, although other forms of information do sometimes fit it well.

[title="2"]Integrating Javascript libraries[/title]

[title="3"]If you're integrating it to your own new PHP code[/title]

For a library called [tt]example.js[/tt], copy it to [tt]themes/default/templates_custom/JAVASCRIPT_EXAMPLE.tpl[/tt]. Use the [b]non-compressed[/b] version, as ocPortal will automatically compress it anyway, and this way is it less likely the Tempcode parser will accidentally try and interpret parts of the code as Tempcode variables.

To include that library in PHP code, you would run [tt]require_javascript('javascript_example');[/tt] from screens you need to use it on.

[title="3"]If you're using it for your own theme, not new PHP code[/title]

Edit the [tt]JAVASCRIPT_CUSTOM_GLOBALS[/tt] template and paste all the Javascript in there.

Alternatively, if keeping the filenames matters, edit the [tt]HTML_HEAD[/tt] or [tt]GLOBAL_HTML_WRAP[/tt] template to include it in the normal documented way for the Javascript library, and upload the files. The canonical place to put extra files in ocPortal is [tt]uploads/website_specific[/tt] and reference them from there, but you can put them somewhere else if you prefer.

[title="2"]Integrating CSS[/title]

The easiest way to integrate CSS is simply to edit the [tt]global[/tt] CSS file for your theme and paste new code in there.

[title="2"]Look and feel[/title]

The other system is unlikely to naturally fit in with your ocPortal theme: therefore you may need to make an effort to make them look alike. This would either involve changing ocPortal, changing the other system, or changing both to coalesce visually.

It is important to understand that it is impossible for two web systems to 'share' a theme, as themes are designed to theme specific content structures. It is so unlikely as to be essentially impossible by chance, for two different systems to have compatible layout structure.

[title="2"]Sharing members[/title]

It can be a bit tricky to share members between ocPortal and another system. There are four general ways to go about it:
1) Make/have-made an ocPortal forum driver that is for the other system (as ocPortal can support different member systems through a forum driver). This is only appropriate if either the other system actually is the forum you will be using, or you are not actually wanting a forum for your site
2) Reprogram the other system so that it uses the same member system that ocPortal uses (be that ocPortal's own, or that of a third party system); you might be able to find a modification for the other system that does it already (for instance, if you are using a widespread forum like phpBB, and want to integrate an external system, it is possible that the other system already has a modification to allow it to tie itself to phpBB)
3) Disable joining of members in the other system, and make it so that login checks against whatever member system ocPortal is using; maintain a separate member database in the other system, but effectively tie it in to whatever ocPortal is using
4) Use LDAP or HTTP-auth for all systems, with each setting up their own separate 'extra' member information scheme; ocPortal supports LDAP and HTTP-auth, but systems that do are in the minority so it may be a lot of work bringing other involved systems 'up to speed'

These are all very technical tasks, so we do not expect that many users will have the experience to easily carry them out themselves.

[concepts
 1_key="iframe"   1_value="A portion of the main web page that encloses another web page (with its own URL)"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_nuances"]Nuances of the forum driver system[/page]
 - [page="_SEARCH:tut_structure"]ocPortal site structure[/page]
 - [page="_SEARCH:tut_httpauth"]Integrating ocPortal into a network via HTTP authentication[/page]
 - [page="_SEARCH:tut_ldap"]Integrating ocPortal into a corporate network via LDAP[/page]

