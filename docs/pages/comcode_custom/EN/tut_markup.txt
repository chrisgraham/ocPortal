[title sub="Written by Philip Withnall, ocProducts"]ocPortal Tutorial: Introduction to XHTML, CSS and Javascript[/title]

This tutorial is an introduction to the main standard web technologies that ocPortal is built upon. It does not explain any technologies specific to ocPortal. If you need to learn about the ocPortal's own Tempcode technology, please read the [page="_SEARCH:tut_tempcode"]Tempcode programming[/page] tutorial.

[contents]decimal,lower-alpha[/contents]

[title="2"]Overview[/title]

ocPortal is built on top of standard web/Internet technologies. These technologies are as follows:
 - [abbr="Transfer Control Protocol / Internet Protocol"]TCP/IP[/abbr] -- this is the protocol for transmitting Internet data and is where IP addresses come from
 - [abbr="HyperText Transfer Protocol"]HTTP[/abbr], and cookies [i](optional)[/i] -- this is the protocol for transmitting web data and is where [abbr="Uniform Resource Locator"]URL[/abbr]s come
 - [abbr="eXtensible Markup Language"]XML[/abbr] (including [abbr="Really Simple Syndication"]RSS[/abbr], Atom, [abbr="Outline Processor Markup Language"]OPML[/abbr], [abbr="Scalable Vector Graphics"]SVG[/abbr] and use in [abbr="Asynchronous Javascript and XML"]AJAX[/abbr]) -- this is a standard for structuring data, used for many web formats that ocPortal supports
 - [abbr="eXtensible HyperText Markup Language"]XHTML5[/abbr] (and microformats) -- this is the standard for web pages
 - [abbr="Cascading Style Sheets"]CSS[/abbr] -- this is the standard for styling web pages; it ties into the XHTML
 - Javascript (aka ECMA-Script) [i](optional)[/i] and [abbr="Document Object Model"]DOM[/abbr] -- this is the standard to make web pages interactive; it ties into the XHTML
 - Dublin Core -- this is the standard for adding meta-data to web pages; it ties into the XHTML (ocPortal 4.2+)
 - PHP -- this is the programming language ocPortal is written in
 - Web server -- this is the software applicaton that serves data over HTTP, and ties into PHP; Apache and [abbr="Internet Information Server"]IIS[/abbr] are examples of the web server applications ocPortal can use
 - [abbr="Structured Query Language"]SQL[/abbr] -- this is the standard for accessing/manipulating data inside databases; ocPortal uses it to talk to the database (e.g. [tt]SELECT * FROM table WHERE something='somevalue'[/tt]), which is usually the MySQL database application
 - [abbr="File Transfer Protocol"]FTP[/abbr] -- this is the standard for uploading files to a server
 - Other standards like iCalendar, CSV files, JPEG, PNG, Zip, Tar, Gzip -- these are used in specific areas of ocPortal, for reading and writing special file types
 - ISO character sets and Unicode (UTF-8) -- these are the alternative standards for Internationalisation support; ocPortal supports both
 - [abbr="Multipurpose Internet Mail Extensions"]MIME[/abbr] -- this is the standard for e-mails
 - [abbr="Simple Mail Transfer Protocol"]SMTP[/abbr] -- this is the standard for sending e-mails
 - [abbr="Lightweight Directory Access Protocol"]LDAP[/abbr] -- this is the standard for having shared logins on a computer network, which ocPortal can use

ocPortal includes some technologies of its own:
 - Tempcode -- this is ocPortal's template technology (ocPortal combines data with XHTML templates in order to construct XHTML web pages)
 - Comcode and Comcode XML -- this is ocPortal's easy-to-use content language (lumps of text are written in this, and there are optional ways of encoding sophisticated behaviours; it compiles to more complex XHTML/CSS/Javascript, via templates)
 - Dublin Core extensions -- ocPortal extends Dublin Core (described above)
 - OcCLE -- A command line interface to an ocPortal website
 - Page-links -- A simple technology for generating link between pages, that compiles to HTTP URLs; page-links are local to a website (i.e. they can only work to generate links within a site), and are consistent regardless of the SEO URL scheme employed (ocPortal supports URL rewriting, which can make the appearance of final URLs vary considerably)

This tutorial focuses mainly on XHTML, CSS and Javascript, which are the three technologies one needs to understand to do advanced themeing. Links to full resources for learning these technologies are also provided.

[title="2"]URLs[/title]

Like all web sites, an ocPortal site uses [abbr="Uniform Resource Locator"]URL[/abbr]s (aka web addresses) to link pages. Within ocPortal, they are usually written as page-links (see above) and then compiled to URLs at the same time the XHTML is generated.

URLs (when written in full) are constructed as follows:
[tt]protocol://server:port/path?parameter=value&anotherparameter=anothervalue&anotherparameter=anothervalue[/tt]

They are constructed as follows:
 - For a web page, the protocol is always 'http' or 'https' (because the page is transferred via the HTTP(S) protocol)
 - The port is almost always '80' which is the default port. If the port is 80 then it is not written down (i.e. ":80" is actually not in the URL)
 - The server is either specified by a domain name or an IP address
 - The path often relates to a file on the server, but does not have to: it is up to the web server how to treat it. For an ocPortal site the path usually points to a PHP file on the server (which the web server will recognise as being something it has to run, and relay the output), except if SEO URLs are on then it might go through a level of indirection (e.g. it looks to the visitor like it refers to an [tt].htm[/tt] file but actually is invisibly redirectly to go through a complex path involving the [tt]index.php[/tt])
 - There can be any number of parameters (including none). The first one has a "?" before it and subsequent ones have a "&" before it

[title="2"]XHTML[/title]

XHTML5 (eXtensible HyperText Markup Language) is the language in which the ocPortal layout is written, and is what ocPortal is designed to output. A markup language is a text-based formatting system that allows an author to designate the structure and importance of pieces of a web page. You can't have a web page without markup; all web pages consist of markup. XHTML5 is the same as HTML5 except written to a higher standard of tidyness. It is designed with XML (eXtensible Markup Language) compatibility in mind.

As previously mentioned, all ocPortal pages are output as XHTML. To customise the appearance of your site, it is just about impossible to do anything major without editing the XHTML. In ocPortal, the XHTML is split up into various templates for ease-of-use and reusability. ocPortal also has an inbuilt XHTML validator, to help you in customising your site.

The basic concepts behind XHTML are very simple: your document starts with a document-type definition, then the markup follows. The markup consists of various [concept]tag[/concept]s, each with optional and mandatory [concept]attribute[/concept]s.
[code="HTML"]
<tagname attribute1="attribute1value" attribute2="attribute2value">tagcontent</tagname>
[/code]
As you can see, the markup is quite simple. The tag consists of an opening part, and a closing part, with content in-between, and attributes listed in the opening part. However, some tags can be even simpler, and not contain any content, or even a closing part.
[code="HTML"]
<tagname attribute1="attribute1value" attribute2="attribute2value" />
[/code]
This form of tag is called self-closing, but is only found occasionally. For both forms of tag, however, there are some rules and guidelines that should be followed:
 - Don't place extraneous spaces in the tag (i.e. between the less-than and the first character of the tag name)
 - [b]Always[/b] close the tag with a closing part, or a self-closing part
 - Don't put more than one space between anything

Tags can contain as many attributes as you like, but they must be valid, and you can't repeat the same attribute twice. Let's look a little closer at the syntax for an attribute.
[code]
attributename="attributevalue"
[/code]
The syntax for an attribute is quite simple, too. However, there are some rules and guidelines you must stick to:
 - Encase the attribute value in double-quotes
 - Don't surround the equals with spaces (it must be next to the last character of the attribute name, and the opening double-quote for the attribute value)
 - Keep the attribute name lower-case

Putting tags together is only slightly more complex than using single tags. You must bear in mind that XHTML is designed to produce a tree-structure of tags: one tag will contain several others ([i]descendants[/i]), which in turn will contain another few (more descendants), or some text, etc.
[code="HTML"]
<tag1>
	<tag2>
		<tag3>Text</tag3>
		<tag4 />
	</tag2>
	<tag2>Text</tag2>
</tag1>
[/code]

A key part of this is the fact that there is some required markup in all XHTML documents: the three root tags. These tags ([tt]<html>[/tt], [tt]<head>[/tt] and [tt]<body>[/tt]) [b]must[/b] be present in a particular place in [b]every[/b] XHTML document along with a valid document-type definition and some required attributes, or browsers won't be able to make head-or-tail of the page.
[code="HTML"]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd>
<html xmlns=http://www.w3.org/1999/xhtml>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
		<title>Sample page</title>
	</head>
	<body>
	</body>
</html>
[/code]
That is just about the smallest valid page possible. However, you needn't worry about all this, as ocPortal already has the basic XHTML structure in-place and working perfectly.

One of the nice things about XHTML is the fact that you can place extraneous whitespace (spaces and tabs) between tags, to make the markup easier to read.
[code="HTML"]
<tag1>
	<tag2 />
</tag1>
[/code]
Doing this when writing markup is [b]highly advisable[/b] as it saves hours of searching through markup to find closing parts, etc.

Up until now, we've only been working with theoretical and fictional XHTML tags and attributes. Now it's time to introduce you to some of the most commonly-used tags. However, first it must be noted that XHTML is not a [b]layout[/b] language! It should not be used with the intention of creating a page with a particular appearance! XHTML coding should be approached with a purely structure-based mindset. That is, XHTML should be used to [b]mark-up the structure of the document[/b] (e.g. headings, paragraphs, sections, links, lists, and other such [b]structural[/b] paradigms). Anybody who uses XHTML with the intention of creating a page that looks a particular way is using it [b]incorrectly[/b]. To learn about how to style a page, see the CSS section below.

Anyway: some XHTML elements.

[html]
<table class="results_table" summary="Columned table">
	<tr>
		<th>
			Element
		</th>
		<th>
			Description
		</th>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;a&gt;</kbd></p>
		</td>
		<td>
			<p>A hyperlink. Recommended attributes: <kbd>href</kbd>
			(URL to link to), <kbd>title</kbd>
			(text to display when hovered-over).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;body&gt;</kbd></p>
		</td>
		<td>
			<p>The parent tag for the main document body.
			<strong>Required</strong>.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;div&gt;</kbd></p>
		</td>
		<td>
			<p>Defines a document section. (See CSS section
			below.)</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;em&gt;</kbd></p>
		</td>
		<td>
			<p>Adds emphasis to the text it surrounds.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;fieldset&gt;</kbd></p>
		</td>
		<td>
			<p>Groups form elements together logically. (See
			<kbd>&lt;form&gt;</kbd>
			tag below.)</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;form&gt;</kbd></p>
		</td>
		<td>
			<p>Defines a form with which to submit data.
			Required attributes: <kbd>action</kbd>
			(URL to send data to). Recommended attributes: <kbd>method</kbd>
			(how to send the data; either <kbd>get</kbd>,
			or <kbd>post</kbd>)</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;h1&gt;</kbd>
			to <kbd>&lt;h6&gt;</kbd></p>
		</td>
		<td>
			<p>Document headings; <kbd>&lt;h1&gt;</kbd>
			is the most important (you should have one of these at the
			beginning of your page, quoting your page title), <kbd>&lt;h6&gt;</kbd>
			is the least important.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;head&gt;</kbd></p>
		</td>
		<td>
			<p>The meta-data section of the document. Contains
			information about the document which isn&rsquo;t rendered, but
			used by the browser in other ways. <strong>Required</strong>.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;html&gt;</kbd></p>
		</td>
		<td>
			<p>The main tag in an XHTML document. Required
			attributes: <kbd>xmlns</kbd>
			(the XML namespace; should be &ldquo;<a href="http://www.w3.org/1999/xhtml">http://www.w3.org/1999/xhtml</a>&rdquo;).
			<strong>Required</strong>.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;img
			/&gt;</kbd></p>
		</td>
		<td>
			<p>An in-page image. Note that this tag shouldn&rsquo;t
			be used to place layout images; only page-specific images. (See
			CSS section below.) Required attributes: <kbd>src</kbd>
			(the URL of the image), <kbd>alt</kbd>
			(alternate text to be displayed if the image cannot be displayed).
			Recommended attributes: <kbd>title</kbd>
			(text to display when hovered-over).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;input
			/&gt;</kbd></p>
		</td>
		<td>
			<p>A form input, for entering data. Recommended
			attributes: <kbd>value</kbd>
			(the value to display &ndash; varies from type to type), <kbd>type</kbd>
			(the type of input to display: <kbd>button</kbd>,
			<kbd>checkbox</kbd>,
			<kbd>file</kbd>,
			<kbd>hidden</kbd>,
			<kbd>image</kbd>,
			<kbd>password</kbd>,
			<kbd>radio</kbd>,
			<kbd>reset</kbd>,
			<kbd>submit</kbd>,
			<kbd>text</kbd>),
			<kbd>name</kbd>
			(the name with which to refer to the input on the server), <kbd>id</kbd>
			(the <strong>unique</strong> identifier with which to refer to this element
			(see CSS and Javascript sections below)).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;label&gt;</kbd></p>
		</td>
		<td>
			<p>A label associated with a form element.
			Recommended attributes: <kbd>for</kbd>
			(the ID of the form element associated with this <kbd>&lt;label&gt;</kbd>).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;legend&gt;</kbd></p>
		</td>
		<td>
			<p>A caption for a <kbd>&lt;fieldset&gt;</kbd>.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;li&gt;</kbd></p>
		</td>
		<td>
			<p>An element in a list (see <kbd>&lt;ul&gt;</kbd>
			and <kbd>&lt;ol&gt;</kbd>).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;ol&gt;</kbd></p>
		</td>
		<td>
			<p>An <em>ordered</em> (sequential and numbered)
			list.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;optgroup&gt;</kbd></p>
		</td>
		<td>
			<p>Groups <kbd>&lt;option&gt;</kbd>s
			in a <kbd>&lt;select&gt;</kbd>
			list. Required attributes: <kbd>label</kbd>
			(the label for the option group).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;option&gt;</kbd></p>
		</td>
		<td>
			<p>An option in a <kbd>&lt;select&gt;</kbd>
			list. Recommended attributes: <kbd>value</kbd>
			(the value to be sent to the server when the form is submitted).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;p&gt;</kbd></p>
		</td>
		<td>
			<p>A paragraph. This element is very commonly
			used.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;select&gt;</kbd></p>
		</td>
		<td>
			<p>A drop-down list. Recommended attributes: <kbd>name</kbd>
			(the name with which to refer to the input on the server), <kbd>id</kbd>
			(the <strong>unique</strong> identifier with which to refer to this element
			(see CSS and Javascript sections below)).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;span&gt;</kbd></p>
		</td>
		<td>
			<p>Groups inline elements. (See CSS section
			below.)</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;strong&gt;</kbd></p>
		</td>
		<td>
			<p>Designates text as strong (usually displayed as
			<strong>bold</strong>).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;sub&gt;</kbd></p>
		</td>
		<td>
			<p>Designates text as subscript.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;sup&gt;</kbd></p>
		</td>
		<td>
			<p>Designates text as superscript.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;table&gt;</kbd></p>
		</td>
		<td>
			<p>A table. Note that this <strong>should not</strong> be
			used to lay-out pages! (See CSS section below.) Recommended
			attributes: <kbd>summary</kbd>
			(a medium-length summary of the content of the table for
			non-visual browsers).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;td&gt;</kbd></p>
		</td>
		<td>
			<p>A table cell.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;textarea&gt;</kbd></p>
		</td>
		<td>
			<p>A multi-line text input area. Required
			attributes: <kbd>cols</kbd>
			(how many character columns to display), <kbd>rows</kbd>
			(how many character rows to display). Recommended attributes: <kbd>name</kbd>
			(the name with which to refer to the input on the server), <kbd>id</kbd>
			(the <strong>unique</strong> identifier with which to refer to this element
			(see CSS and Javascript sections below)).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;th&gt;</kbd></p>
		</td>
		<td>
			<p>A table header cell.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;title&gt;</kbd></p>
		</td>
		<td>
			<p>The title of the page (to be displayed in the
			browser&rsquo;s title bar, for example). <strong>Required</strong>.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;tr&gt;</kbd></p>
		</td>
		<td>
			<p>A table row.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>&lt;ul&gt;</kbd></p>
		</td>
		<td>
			<p>An <em>unordered</em> (non-numbered &ndash; blank
			bulleted) list.</p>
		</td>
	</tr>
</table>
[/html]

Although this table doesn't list all of the XHTML elements (it lists approximately half of them), the others are used so rarely it's easier to look them up when required, than learn them first. This table also does not list all the attributes of all the elements. However, it lists the important ones, and the following table lists all the attributes that can be used with any XHTML element; the standard attributes.

[html]
	<table class="results_table" summary="Columned table">
		<tr>
			<th>
				Attribute
			</th>
			<th>
				Description
			</th>
		</tr>
		<tr>
			<td>
				<p><kbd>class</kbd></p>
			</td>
			<td>
				<p>The CSS class of the element; used to style
				and jazz-up appearances. (See CSS section below.)</p>
			</td>
		</tr>
		<tr>
			<td>
				<p><kbd>id</kbd></p>
			</td>
			<td>
				<p>The <strong>unique</strong> identifier for the element
				(see CSS and Javascript sections below).</p>
			</td>
		</tr>
		<tr>
			<td>
				<p><kbd>style</kbd></p>
			</td>
			<td>
				<p>Inline styling rules &ndash; used to apply
				styling without using a separate CSS definition. Note that it&rsquo;s
				advisable to <em>separate</em> structure and styling, so use of
				this attribute is deprecated for all intents and purposes. (See
				CSS section below.)</p>
			</td>
		</tr>
		<tr>
			<td>
				<p><kbd>title</kbd></p>
			</td>
			<td>
				<p>Text to display in a tooltip when the element
				is hovered-over.</p>
			</td>
		</tr>
	</table>
[/html]

There are other standard attributes, but only four, and they're used exceedingly infrequently. Note that there are also event attributes (see Javascript section below).

Now that you've learnt all the XHTML elements, how to use them, and their attributes, you might think it's all over. This is not true; XHTML has a final surprise for you.

As you might have guessed, you can't put any element inside another. There are rules. The basic rule is that of block-level and inline elements. Every XHTML element is either a block-level element, or an inline element (with a few exceptions, which are beyond the scope of this tutorial, but they don't behave particularly differently anyway.) With a few exceptions, block-level elements may not contain other block-level elements. As well as this, inline elements may not contain block-level elements. Block-level elements may, however, contain inline elements.

What follows is an example XHTML document, utilising all of the above principles:
[code="HTML"]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="en">
	<head>
		<title>Example XHTML document</title>
		<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
		<meta name="keywords" content="example document,XHTML,element,attribute" />
		<meta name="author" content="ocProducts" />
		<meta name="description" content="An example XHTML document." />
		<script type="text/javascript" src="http://example.com/script.js" />
		<link href="http://example.com/style.css" rel="stylesheet" media="all" type="text/css" />
		<link href="http://example.com/favicon.jpg" rel="icon" type="image/jpg" />
		<link href="http://example.com/" rel="home" title="Home" />
	</head>
	<body>
		<div id="top_bar">
			<h1>
				<a href="http://example.com/" title="The example.com homepage">example.com</a>
			</h1>
		</div>

		<div id="main_doc">
			<h2>Example content</h2>
			<p>This is example content.</p>
			<ul>
				<li>How about</li>
				<li>an example</li>
				<li>unordered list?</li>
			</ul>

			<div id="bottom_bar">
				<a href="http://www.blogrankings.com"><img src="http://www.blogrankings.com/images/blogrankings.gif" alt="BlogRankings" /></a>
				<a href="http://www.spreadfirefox.com/?q=user/register&amp;r=23557"><img src="http://example.com/firefox.png" alt="Get Firefox!" /></a>
			</div>
		</div>

		<div id="right_doc">
			<h3>Login status</h3>
			<ul>
				<li>
					<a href="http://example.com/login.html" title="Log in to example.com">Login</a>
				</li>
				<li>
					<a href="http:// example.com/register.html" title="Register an account at example.com">Register</a>
				</li>
			</ul>
		</div>

		<div id="left_doc">
			<h3>Intro</h3>
			<p>This is a well-written <abbr title="eXtensible HyperText Markup Language">XHTML</abbr> page.</p>
			<p>Example paragraph.</p>
		</div>
	</body>
</html>
[/code]

[title="2"]CSS[/title]

CSS (Cascading StyleSheets) is the language used to style and position elements in a webpage. The advantage of separating [i]content[/i] and [i]structure[/i] from [i]style[/i] and [i]layout[/i] is that if, for example, you have a separate CSS file (i.e. the CSS is not embedded into the XHTML), you can easily apply a standard style across a whole website, without duplicating the CSS over and over again (which would inevitably lead to omissions, errors, and maintenance problems).

CSS is a simple language, consisting of [i]rules[/i], which contain various [i]properties[/i]; the individual parameters for styling an element.
The basic format of a rule is as follows.
[code="CSS"]
selector
{
	property: property-value;
}
[/code]
The [i]selector[/i] defines which XHTML elements/classes/IDs the properties in the rule are applied to, the [i]property[/i] is the pre-defined name of the property, and the [i]property-value[/i] is the value assigned to the property (the allowed values vary from property to property). Note the spaces, colons and the semi-colon at the end of the property line.

There are several types of selector defined by the CSS 1 standard, which we will cover here. There are also several new selectors defined by both CSS 2 and CSS 3, but they are beyond the scope of this tutorial.

The most basic selector is the [i]type selector[/i], and it selects all the XHTML tags in the markup of the specified name.
[code="CSS"]
p
{
	property: property-value;
}

div
{
	property: property-value;
	property: property-value;
}
[/code]
The CSS above would apply the specified properties to any [tt]<p>[/tt] or [tt]<div>[/tt] element in the page.

Another basic selector is the [i]class selector[/i], which selects all XHTML tags with the specified class attribute value.
[code="CSS"]
.warning
{
	property: property-value;
}
span.timestamp
{
	property: property-value;
}
[/code]
This example applies the specified properties to any tag which has a class of 'warning', or any <span> tag which has a class of 'timestamp'. Note that you can combine type and class selectors together (as in the second rule in the above example), to produce a class selector which only applies properties to tags with the specified class, that also are of the specified tag name.

A little aside explanation about the XHTML class attribute is probably required here. As mentioned in the XHTML section above, it is a standard attribute, and as such can be applied to any element. It should contain a space-separated list of CSS class selector names to be applied to the tag. Usually, however, only one class selector is listed in the class attribute.
[code="HTML"]
<div>
	<span class="timestamp red">Warning received yesterday.</span>
<p class="warning">I know you know that I've been messing with knowledge. However, I'd like you to forget that I know what you know, and that you don't know what I know. I know more about what you know that you could possibly ever know about my knowledge. My knowledge about your knowledge of what I know regarding now is secret, and I know that you know about the now and then of knowledge, new life, and gibberish.</p>
</div>
[/code]
In that example, the [tt]<span>[/tt] tag has two CSS classes attached. However, it should be noted that when naming CSS classes, you should name them for their [i]function[/i], rather than for their [i]appearance[/i]. This is for maintenance considerations: if you name a class 'red', then change the colour to blue, you'd have to rename it, and change all the references to it, or leave it as a mess.

ID [i]selectors[/i] are another basic selector type, which apply properties to elements based upon their id attribute (for more information on the id attribute, see the Javascript section below).
[code="CSS"]
#main_doc
{
	property: property-value;
}
[/code]
Note that this rule should (in theory) only be applied to [b]one[/b] tag in the entire page (if at all), as the id attribute of any tag should be [b]unique[/b]. Due to this, the ID selector isn't used as frequently as other selectors, and when it is used, it is usually used for basic page layout rules, such as positioning the title, main body, and menus. Note also that ID selectors can be coupled with type selectors, as with the class selector.
[code="CSS"]
h1#title
{
	property: property-value;
}
[/code]

The final basic selector is the [i]descendant selector[/i], which applies properties to specific tags, but only if they are a descendant of another specified tag (or tags). Note that it applies the properties to the final tag in the sequence (i.e. the right-most tag in the selector).
[code="CSS"]
h3 a
{
	property: property-value;
}
[/code]
This example applies the specified properties to any <a> tag which is beneath a level-three heading (<h3>).

Now that the basic selectors have been covered, we move on to properties and property values. A property can only accept [b]one[/b] out of a list of pre-defined values. Some values are variable (such as widths, and other numeric values), but most are just text.

Some commonly used properties are listed below.

[html]
<table class="results_table" summary="Columned table">
	<tr>
		<th>
			Property
		</th>
		<th>
			Description
		</th>
	</tr>
	<tr>
		<td>
			<p><kbd>background</kbd></p>
		</td>
		<td>
			<p>The background colour and image.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>border</kbd></p>
		</td>
		<td>
			<p>The border; a line (of specified width) that
			borders (in a box) the specified element.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>display</kbd></p>
		</td>
		<td>
			<p>Used to alter the display mode of the specified
			element (i.e. change it from a block-level to an inline element).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>position</kbd></p>
		</td>
		<td>
			<p>The mode with which to place the element.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>height</kbd></p>
		</td>
		<td>
			<p>The height.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>width</kbd></p>
		</td>
		<td>
			<p>The width.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>font</kbd></p>
		</td>
		<td>
			<p>Font options and configuration.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>list-style</kbd></p>
		</td>
		<td>
			<p>How to layout and draw a list.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>margin</kbd></p>
		</td>
		<td>
			<p>The margin options: the space around the
			<strong>outside</strong> of an element separating it from other elements
			(think of it as a &ldquo;moat&rdquo; for an element).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>padding</kbd></p>
		</td>
		<td>
			<p>The padding options: the space on the <strong>inside</strong>
			of an element (between the border and the content &ndash; think of
			it as the cavity in a cavity wall).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>bottom</kbd></p>
		</td>
		<td>
			<p>The space below an element, and above the
			element&rsquo;s parent&rsquo;s border.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>left</kbd></p>
		</td>
		<td>
			<p>The space to the left of an element, and to the
			right of the element&rsquo;s parent&rsquo;s border.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>right</kbd></p>
		</td>
		<td>
			<p>The space to the right of an element, and to
			the left of the element&rsquo;s parent&rsquo;s border.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>top</kbd></p>
		</td>
		<td>
			<p>The space above an element, and below the
			element&rsquo;s parent&rsquo;s border.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>color</kbd></p>
		</td>
		<td>
			<p>The colour of <strong>text</strong>.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>text-align</kbd></p>
		</td>
		<td>
			<p>The horizontal alignment of text.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>text-decoration</kbd></p>
		</td>
		<td>
			<p>Decoration applied to text, such as underline
			or overline.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>text-indent</kbd></p>
		</td>
		<td>
			<p>Indentation applied to the <strong>first line</strong> of
			text.</p>
		</td>
	</tr>
</table>
[/html]

Note that most of these properties can be split up into separate properties (i.e. [tt]margin[/tt] can be split up into [tt]margin-left[/tt], [tt]margin-right[/tt], [tt]margin-top[/tt] and [tt]margin-bottom[/tt]).

All these properties are no use without property values. Although most elements only accept values from a property-specific pre-defined list, some elements accept more general values, such as pixel or percentage measurements.

Pixel measurements should generally be used for fixed-size objects, which are usually encountered when doing the basic layout of a page.
[code="CSS"]
#left_col
{
	width: 200px;
}
[/code]
Percentage measurements are much better to use, however, as they allow dynamic resizing of page layout if the browser window is resized.
[code="CSS"]
#left_col
{
	width: 20%;
}
[/code]

There are other general property values, but they are beyond the scope of this tutorial.

The final part of the CSS jigsaw is [i]inheritance[/i], or [i]cascade[/i]. This is one of the main features of CSS, and gives it power and flexibility. The basic principle is that properties applied to one tag are automatically applied to any descendant tags of that tag (with a few exceptions for sanity's sake). So, for example, if you had a rule that applied a red text colour to an element, that element's descendants would also have red text, unless they had rules applied to them to override this.

[i]Cascade[/i] is actually a variation of inheritance, on a larger scale. Specifically, it is the inheritance of rules in the hierarchy of stylesheets. Although only applicable for very large sites, it is important to know about: a stylesheet can import another stylesheet using something called the '@import' rule. [i]Cascade[/i] is when the rules and properties from the first stylesheet cascade into the second stylesheet, and are applied to elements unless overruled.

[title="2"]Javascript[/title]

Javascript is the final piece in the web development puzzle. It allows dynamic, event-driven, interactive functionality, and is the prime component of emerging technologies such as Ajax.

It would be pointless to go into a detailed explanation of Javascript and how to script in it, as all the Javascript a developer could ever require is available online already.
However, it is useful to be able to understand roughly what some Javascript does, and the concepts behind it.

Javascript is a [i]client-side[/i] scripting language; the web server sends the raw Javascript to the client's browser, which goes through it, performing the specified operations. It is very fast, and can manipulate a webpage in microscopic detail.

Javascript generally consists of [concept]function[/concept]s, which contain lines of code.
[code="Javascript"]
function function-name(argument1,argument2)
{
	lines-of-code;
}
[/code]
Functions have to start with the [i]keyword[/i] 'function', then the name of the function, and the arguments required to be passed to the function in brackets. Following this should be the lines of code in the function, surrounded by curly brackets.

The lines of code themselves have to follow strict rules (which are beyond the scope of this document), and have to be terminated with a semicolon.
[code="Javascript"]
function is_IE()
{
	if(navigator.appName=="Microsoft Internet Explorer")
	{
		return true;
	}

	return false;
}
[/code]

If you are knowledgeable in the area of programming, you will notice that Javascript uses C-style syntax.

Javascript is most powerful when applied to the DOM -- the Document Object Model, which is a way of accessing the properties and attributes of every node in the document tree of an XHTML (or XML, etc.) page. You don't need to know about how to use the DOM in Javascript, you just need to know that the DOM extensively references the IDs of XHTML elements, specified by their id tag.

Another feature of Javascript is its event model. You can specify Javascript functions or code to be called when, for example, a link is clicked. You do this either via the event attributes in an XHTML document, or through event listening functions in Javascript.

[html]
<table class="results_table" summary="Columned table">
	<tr>
		<th>
			Event attribute
		</th>
		<th>
			Description
		</th>
	</tr>
	<tr>
		<td>
			<p><kbd>onload</kbd></p>
		</td>
		<td>
			<p>Called when the document loads. Can only be put
			in <kbd>&lt;body&gt;</kbd>
			or <kbd>&lt;frameset&gt;</kbd>
			tags.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>onchange</kbd></p>
		</td>
		<td>
			<p>Called when an input is changed. Can only be
			put in one of the form tags (<kbd>&lt;input&gt;</kbd>,
			<kbd>&lt;select&gt;</kbd>,
			etc.).</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>onsubmit</kbd></p>
		</td>
		<td>
			<p>Called when the form is submitted. Can only be
			put in a <kbd>&lt;form&gt;</kbd>
			tag.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>onkeypress</kbd></p>
		</td>
		<td>
			<p>Called when a key is pressed (and released) and
			the element has focus. Can be put in any tag, with a few logical
			exceptions.</p>
		</td>
	</tr>
	<tr>
		<td>
			<p><kbd>onclick</kbd></p>
		</td>
		<td>
			<p>Called when a the element is clicked. Can be
			put in any tag, with a few logical exceptions.</p>
		</td>
	</tr>
</table>
[/html]

To use these event attributes, simply put them into the tag.
[code="HTML"]
<a href="http://example.com/" title="Example website" onclick="log_click('http://example.com/'); ">example.com</a>
[/code]

You can also put more than just a function call into event attributes.
[code="Javascript"]
<a href="http://example.com/" title="Example website" onclick="window.alert('You clicked the link!'); log_click('http://example.com/'); ">example.com</a>
[/code]

Javascript is a flexible language, and many things can be achieved by using it. However, you must remember that styling should be left to CSS, structure should be left to the XHTML, and Javascript should be used for interactivity.

It should also be stressed as a last point that [b]Javascript is not secure[/b]; if you write a login system in Javascript that checks an inputted password against a one coded into the Javascript, anybody can just view the source of the Javascript using their browser, look through it, and extract the password with ease. This goes for other similar situations as well, such as quizzes; the answers, passwords, or any other potent information that should be kept secret. It should be stored, processed, and handled exclusively [b]on a server[/b]!

[title="2"]Online tools and references[/title]

[title="3"]General web platform references[/title]

 - http://webplatform.org
 - http://w3.org
 - http://caniuse.com/

[title="3"]XHTML tools/references[/title]

 - http://www.yourhtmlsource.com/
 - http://www.html.net/
 - http://www.tizag.com/
 - http://www.davesite.com/webstation/html/
 - http://www.w3schools.com/xhtml/default.asp
 - http://jarmin.com/accessibility/index.html
 - http://en.wikiversity.org/wiki/Web_design

[title="3"]CSS tools/references[/title]

 - http://net.tutsplus.com/tutorials/html-css-techniques/design-and-code-your-first-website-in-easy-to-understand-steps/
 - http://www.yourhtmlsource.com/
 - http://www.html.net/
 - http://www.tizag.com/
 - http://www.w3schools.com/xhtml/default.asp
 - http://www.westciv.com/style_master/house/index.html
 - http://www.eskimo.com/~bloo/indexdot/css/index.html
 - http://www.alistapart.com/

[title="3"]Javascript tools/references[/title]

 - http://www.tizag.com/
 - http://javascriptkit.com/
 - http://www.mozilla.org/docs/dom/technote/tn-dom-table/
 - http://www.quirksmode.org/js/
 - http://www.devguru.com/technologies/javascript/home.asp
 - http://www.w3schools.com/js/default.asp
 - http://www.w3schools.com/htmldom/default.asp
 - http://www.w3schools.com/dhtml/default.asp
 - http://www.w3schools.com/dom/default.asp
 - http://www.adaptivepath.com/publications/essays/archives/000385.php
 - http://www.mozilla.org/docs/dom/domref/dom_shortIX.html
 - http://www.smashingmagazine.com/2008/09/11/75-really-useful-javascript-techniques/

[concepts
 1_key="XML"          1_value="eXtensible Markup Language: a format for structuring other languages that fit well into a tree structure"
 2_key="HTML"         2_value="HyperText Markup Language: a language for the documents of the world wide web"
 3_key="XHTML"        3_value="eXtensible HyperText Markup Language: HTML adapted to follow XML rules"
 4_key="CSS"          4_value="Cascading Style Sheets: a technology that allows style to be specified in a config-file like fashion, and mapped to XHTML structure"
 5_key="Javascript"   5_value="The standard client-side scripting language for the Internet, allowing web pages to be dynamic without reloading of pages. In standardisation, it is known as ECMA-Script, but that term is rarely used."
 6_key="tag"          6_value="A piece of structure: an XML tree is made up of tags"
 7_key="element"      7_value="Another name for a tag really"
 8_key="(tag) attribute"           8_value="Tags may contain attributes that specify properties for the tag"
 9_key="inline (tag)"  9_value="A tag that wraps around a portion of HTML to apply something to it, or to use it"
 10_key="block (tag)"  10_value="A tag that takes up a boxed area of the screen space, and may have its own background. Block tags force a visual line-break after them, unless they are styled to be inline"
 11_key="(tag) class"  11_value="A tag class is generally used so as to join XHTML tags to CSS styles"
 12_key="(XML) ID"     12_value="An ID is generally used so as to allow Javascript code to reference specific XHTML tags"
 13_key="(Javascript) event"        13_value="Javascript hooks on to web browser actions via an event model; tags 'fire' events, and Javascript can be set up to launch certain code upon the event firing"
 14_key="(CSS) selector"            14_value="CSS rules apply to certain tags, and selectors are used to determine which tags; selectors are very powerful, although Internet Explorer only supports a few of them"
 15_key="(CSS) property"            15_value="CSS rules specify values for properties in order to style"
 16_key="DOM"          16_value="Document Object Model. A scheme of referencing a document based upon the XHRML structure. Usually used with Javascript."
 17_key="DHTML"        17_value="Dynamic HTML. Almost a synonym for Javascript"
 18_key="client-side"  18_value="Code that is processed on a viewer's computer. The opposite of server-side"
]Concepts[/concepts]

[title="2"]See also[/title]

 - [page="_SEARCH:tut_themes"]Themeing your site[/page]
 - [page="_SEARCH:tut_tempcode"]Tempcode programming[/page]
 - [page="_SEARCH:tut_accessibility"]Helping improve site accessibility for disabled users[/page]
 - [page="_SEARCH:tut_browsers"]Browser version requirements[/page]
 - [page="_SEARCH:tut_how_internet_works"]How the Internet actually works[/page]

